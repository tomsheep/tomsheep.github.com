<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>言之有误</title>
        <description>言之有误 - tomsheep</description>
        <link>http://blog.tomsheep.net</link>
        <link>http://blog.tomsheep.net</link>
        <lastBuildDate>2014-08-13T18:35:16+08:00</lastBuildDate>
        <pubDate>2014-08-13T18:35:16+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>别让我消失——2013</title>
                <description>&lt;p&gt;即将过去的一年看上去乏善可陈，就像它的许多前任一样。即便如此，我也得感谢它的陪伴，更何况即便在一些暗淡的日子里，它也没有放弃对我的治疗。年初我因为一份幸运的机缘加入算法组，踏上一段旅程，兴奋、怀疑、沮丧、坚持、豁然开朗；年末我因为一个似是而非的故事，踏上一段真实的旅程，冷漠、珍惜、自省、希望、泪流满面。&lt;/p&gt;

&lt;p&gt;“少说话，少装X。”这是上一个新年来临时我给自己立的规矩。据传古希腊Delphi神殿里挂着苏格拉底的三句半，“认识你自己”、“你是”、“勿过”、“别装X”。最后半句这么帅，想想就知道是我给总结的。不得不承认，我是个装X界的天才，专注该领域20年，无师自通那种的。而且和相声圈的情况类似，我也不喜欢同行，他们业务太差。这大概是一种自我保护，反映出内心的孱弱，缺什么装什么，这是基本的规律。只有三分，非要摆出十分的谱来。正如我本身鲁钝慢热，浅薄无知，干什么都事倍功半，却总要装得天赋异禀，博学深刻；本身无聊乏味，却竭力营造出风趣幽默的形象来。装多了自然有人信，但自己总归是骗不过的。虽说“Fake it till you make it”，可我装了这许多年，X还是X，我还是我。我大概自己都开始讨厌这副做派了，我警告自己有三分就说三分，把牛X还给牛。这个操作起来真不容易，因为三分太差劲了，就跟喝白开水一样，总不能整天说自己今天喝了白开水吧。我脸皮薄，怕被人笑话，所以渐渐就不怎么说话了。&lt;/p&gt;

&lt;p&gt;有幸混进算法组之后的很长一段时间里，我其实都一头雾水，书翻了不少，看懂的却没几段，我很沮丧，或者说，我很害怕，我宁愿接受“不努力”，也不愿承认“没能力”。前者是时间问题，后者是智力问题。有一段时间我真的觉得我完了，祖师爷没赏我这口饭吃。我对韩博士说，我看不懂那些论文。韩博士说，你看的太少。说起来像是传奇故事，就在这个对话结束的当天下午，我突然看明白了手上的论文在讲什么，并且在随后的组会上完整地做出了解释。这个奇异的现象一般情况下在我们码农界这么描述的：“我什么都没改，重跑了一遍脚本就好了”。我再去读其他的论文，发现脉络结构也格外清楚。我开挂了。当然了，我是主角嘛。那天我的心情跟抱在电线杆上哭喊“我的病有救了”没什么两样，满脑子都是《麦田里的守望着》主人公的喃喃自语——别让我消失，别让我消失。&lt;/p&gt;

&lt;p&gt;还好，还是时间问题。&lt;/p&gt;

&lt;p&gt;如果这一年就这样结束，我也挺满足了，丢了不少铠甲，少了保护，也少了负重。我依然怯懦、愚钝，但关于浮夸和自负的疗效还算显著。虽然显得无趣，但也不至于让人讨厌。汪老师生来彷徨，我生来无趣还不行么。我努力接受自己的无力，努力和这个世界讲和,关注亲人的“用户体验”，定期买礼物寄回家，关注经济与理财，关注楼市与股市，像个无趣的中年大叔一样——别逗了，你不本来就是么？&lt;/p&gt;

&lt;p&gt;时间也许觉得还欠我点什么，或者我欠他点什么，非要赶在交班之前把我弄哭不可。就在几天前，我因为一个故事奔走千里，故事里是我，又不是我，&quot;I have to go see about a girl”, 如果有人问，我就准备偷马特戴蒙的台词。一些朋友吃饭扯淡的时候有时会八卦我喜欢什么样的姑娘，我的描述从来都没有让他们满意过，有时候是詹妮弗艾莉的伊丽莎白，有时候是贝鲁奇的马莲娜，有时候甚至是《龙纹身》里的鲁妮玛拉。 他们找不出pattern，我也没有答案。我说我也不知道长什么样，但我看见了我能指给你。&lt;/p&gt;

&lt;p&gt;我曾经认识一个姑娘，姑娘算不上漂亮，当然也并不难看，事实上我已经很久没有见过她，记忆里她五官的轮廓都有些模糊。我们的故事并没有美满的结局，她任性地逃走，我也自负地转身，生怕动作不够漂亮。我一直心安理得地觉得我们的人生不会再有交集。在结束这次短暂旅程后的第二天，我在书桌前对着一堆讲义哭得不能自理。我突然发觉原来她对我如此重要。“它曾经击中我内心最柔软的部分，激发我心灵中最美好的东西，这些东西鼓舞我前进，滋养我的梦想，让我不仅爱上触发它的人，也爱上自己，并激励我成为更好的自己。它至今仍然能带给我感动。我像爱惜自己的羽毛一样爱惜它，看到它就不会忘记那颗跳动的赤子之心。” 这段话这么帅，想想就知道是我说的。别让我消失，别让我消失。&lt;/p&gt;

&lt;p&gt;看，我指给你们看，就是这样的。&lt;/p&gt;

&lt;p&gt;这就是我2013年要讲的故事，恐怕蠢得会让你笑出声来。笑就笑吧，《傲慢与偏见》里的班纳特先生是个爱吐槽的老头，他说，“生活无非是我们笑笑别人，然后再让别人笑笑我们。”&lt;/p&gt;

&lt;p&gt;2014，别让我消失，别让我消失。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2013/12/24/dont-let-me-disappear</link>
                <guid>http://blog.tomsheep.net/2013/12/24/dont-let-me-disappear</guid>
                <pubDate>2013-12-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>关于幽默-G&G沙龙番外篇</title>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主讲：tomsheep&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音频下载：&lt;a href=&quot;https://docs.google.com/file/d/0ByaPRVM5h3fvZzhpM09yclF2bDQ/edit?usp=sharing&quot; title=&quot;音频下载&quot;&gt;humor-64kbps.mp3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;关于幽默-G&amp;amp;G沙龙番外篇&lt;/h3&gt;

&lt;p&gt;这期因为Bug同学没有准备好，但我们不希望沙龙出现轮空的状态，这样会影响到做一件事的心气，所以我来扯淡一段，扯到哪算哪，作为番外篇。我没有准备文稿，只有&lt;a href=&quot;https://docs.google.com/file/d/0ByaPRVM5h3fvZzhpM09yclF2bDQ/edit?usp=sharing&quot; title=&quot;音频下载&quot;&gt;音频&lt;/a&gt;，我口才比较差，脱稿会相对混乱，大家忍受一下。&lt;/p&gt;

&lt;h3&gt;内容提要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;幽默及创作手法&lt;/li&gt;
&lt;li&gt;关于相声&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://blog.tomsheep.net/2013/06/30/about-humor</link>
                <guid>http://blog.tomsheep.net/2013/06/30/about-humor</guid>
                <pubDate>2013-06-30T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>《迦陵说词讲稿》读书分享</title>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主讲：tomsheep&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整理：tomsheep&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音频下载：&lt;a href=&quot;https://docs.google.com/file/d/0ByaPRVM5h3fvTk5VcUZkVHVMWjg/edit?usp=sharing&quot; title=&quot;音频下载&quot;&gt;ci_64kbps.mp3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PPT下载：&lt;a href=&quot;https://docs.google.com/presentation/d/1fDL5RCWEibqepy1Zo1yrzaofi-umYV1p-Tz8_HPms8g/edit?usp=sharing&quot; title=&quot;PPT下载&quot;&gt;《迦陵说词讲稿》读书分享.pptx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;G&amp;amp;G沙龙第1期&lt;/h2&gt;

&lt;p&gt;我们这个沙龙说了快有一年，一直没能组织起来，客观原因是时间不好凑，地点也难选;主观原因是我比较懒，然后又比较矫情，觉得不容易搞，而且搞出来也未必满意。现在我觉得是要先行动起来才好。前天我还和一个同事辩论软件开发尤其是框架开发的演化问题，我还振振有词地反驳他所说的“框架初期需要一定的过度优化”，讲了一套“循序重构，螺旋上升”的大道理。可见道理不是不明白，讲出来也是轻松便宜的，可要真正轮到自己做的时候，就知行不能合一了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Now I have come to the cross-roads in my life. I always knew what the right path was. Without exception, I knew, but I never took it. You know why? It was too damn hard.
    ——Scent of a Woman (1992)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;G&amp;amp;G沙龙：初心&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    “一个人大脑中从未分享过的知识、经验、见解和判断力，总是另一群人非常想知道的东西。”    ——知乎周源

    “现代人的多数行为（如果不是一切）都可以从内心的孤独感找到原因。”    ——tomsheep
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既然是第一期，首先总是要有一个楔子一样的综述，来介绍一下我们这个party的愿望以及要怎么玩下去。这是我觉得有必要发起这个活动的初衷，第一句是知乎的创始人周源说的，我觉得这是一个很打动人、至少很打动我的一句话。我的终极理想其实是教育理想，而传统的传道授业的教育模式在去中心化的今天有了全新的生命，信息的获取是如此便捷，每个人脑中都可能有对我有益的东西，“分享”其实只是一个很初级的形式，但我们总要走出第一步，否则永远都不知道最终能走到哪里。第二句话是我说的，我觉得“孤独病”是生活在我们这个时代人的一大症结，反正我是觉得非常孤独，这种感觉是无时无刻不存在的。繁华喧闹五彩缤纷的城市生活丝毫没有减轻这一病症，反而是加重病情的罪因之一。我认为心灵层面的交流、体认、宽容、分享，才是治愈这一顽疾的良药，所谓的“归属感”，恐怕是要从这个层面（或者更深）才能获取得到的。所以，这两点其实就是我要发起这个活动的初衷，简而言之就是：既增长了见识，又锻炼了队伍。&lt;/p&gt;

&lt;h2&gt;G&amp;amp;G沙龙：形式与内容&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;媒介：线上视频&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间：原则上一周一次&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主讲人：原则上更次轮换，不强求;一次活动后讨论确定下次主讲&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容：题材不限（举例：读书心得、生活窍门、个人感想、把妹经验、育儿宝典……）只要愿意分享，都可以；篇幅不限，但尽量把一件事将完整&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;本期内容：《迦陵说词讲稿》读书分享&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;词的美感特质&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;词的演化过程&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;词的批评与审美&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由词发散的思维&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;现在转入这期的内容，本来我想将机器学习心得或者是Linux内核，但是觉得没准备好，还too young，可以再沉淀一短时间再说。正好最近闲时看一本叶嘉莹老师讲古典词作的书，读完觉得特别好，以后我教小孩肯定会有这本。正好来简单分享一下吧，准备的也不是特别充分，有很多点我感受到了可能讲不出来，但主要是为了我们这个活动能kick off，抛砖引玉吧。&lt;/p&gt;

&lt;p&gt; &lt;a href=&quot;http://book.douban.com/subject/2039292/&quot;&gt;《迦陵说词讲稿》&lt;/a&gt; 作者：叶嘉莹&lt;/p&gt;

&lt;p&gt;简单介绍一下这本书和作者，叶嘉莹是目前我国古典诗词学界非常著名的大家之一，在美国、大陆、台湾都任过教，现在大概80多岁了。她从小受过良好的古典教育，之后师从顾随，也是民国时期的诗词学问名家。这本书主要收录的是她在各地教学演讲的讲稿，大约有十六讲。内容上互相有重叠的地方，但每一讲的主题和视角是有所不同的。&lt;/p&gt;

&lt;p&gt;通常我们说到古典文学体裁都是诗词和在一起说，他们都是韵文，写他们的人好像也有很大重合性，但其实这两种体裁有很大不同，这个不同不仅是是形式上的，也是主题和内容上的。中国古代是有“诗以言志，文以载道”的传统的，文章和诗都是有这样的附加属性的文学体裁，就是说士大夫们、文人骚客们写文章是要阐释经国之“道”，诗是要表达自己的意志与情志的。意志就是指理想抱负，情志则是喜怒哀乐。&lt;/p&gt;

&lt;p&gt;而词的诞生完全是另外一回事，最初词就像是流行歌曲的歌词，是六朝到唐代时候逐渐流行起来的一种乐曲叫燕乐，非常好听，通常是由一些歌姬酒女来演唱。所以词有很强的音乐性，诗只是讲究平仄，词是四声都会唱出来的。歌词的内容一般都很直白通俗，敦煌出土的曲子词可以看出这一时期的歌词模样。后来因为这样的乐曲实在是很流行很好听，就逐渐吸引了一批士大夫来写歌词给这些歌女唱，他们都是很有文学修养的饱学之士，写出来的歌词艺术水平自然要高很多，《花间集》序言里就说有这样一句说明词的最初来源：“西园英哲，用资羽盖之欢；南国婵娟，休唱莲舟之引” 意思就是文人学士们在游乐之余为歌女写出一些有文化有美感的歌词，让南国的这些美女们不用在唱庸俗的采莲曲了。&lt;/p&gt;

&lt;p&gt;所以词最初的功用决定了它的主要体裁与内容就是美女与爱情。和诗不同，士大夫们写词的时候完全没有写诗时“言志”的负担，就是为了娱乐嘛，而且是写给歌女的，以她们的口吻来写的，自然就没有了诗的约束。当然写这种体裁就成为有争议的，被认为是掉价的行为，这种观念一直延续到两宋也依然是这样。但写歌词的诱惑力实在太大了，还是有很多士大夫忍不住要去写，他们也有矛盾的地方。黄庭坚就为自己辩护说写词不过是“空中语而”，写着玩，不作数的。晏殊身为宰相，虽然自己也写词，还是要鄙视柳永，柳永说您不是也写词么，我跟您一样啊。晏殊说 闹那，我虽然也写词，可也没写过彩线闲占伴伊坐这样庸俗没品的句子。所以可见词这种以描写美女和爱情为主要内容的题材，虽然大家喜欢写，但主流的意识形态还是认为这是不登大雅之堂的。&lt;/p&gt;

&lt;h3&gt;词：“要眇宜修”的含蓄之美&lt;/h3&gt;

&lt;p&gt;由于主题上的本质不同，造成了诗和词在功用以及美学特质上的不同。张惠言说“意内而言外谓之词。其缘情造端，兴于微言，以相感动；极命风谣里巷男女哀乐，以道贤人君子幽约怨悱不能自言之情，低徊要眇，以喻其致” 道出“贤人君子幽约悱恻不能自言之情”，就是词这种文学体裁的共用了。所谓低回要眇，就是形容女子含蓄、内敛的一种美。所以词的美，也是一种女性化的美。女性形象也是词作当中最典型的形象。我过去看到过一篇微博，挺有意思，说宋词总结起来就是“小资喝花酒，老兵坐床头。知青咏古自助游，皇上宫中愁。剩女宅家里，萝莉嫁王侯。名媛丈夫死得早，mm 在青楼” 还是挺形象的，从中可以看出词的主要体裁和描写对象。&lt;/p&gt;

&lt;h3&gt;词：“感发”之美&lt;/h3&gt;

&lt;p&gt;“他们在为歌女写词的时候，在显意识中并没有打算写自己心中的那些苦恼，可是潜意识却不知不觉之中把心中的这些苦闷流露出来了” 这些潜意识的流露，就给词的读者提供了一种联想的可能性。&lt;/p&gt;

&lt;p&gt;双重性别我们已经提到过，写词的绝大多数都是男性知识分子，最早的花间词集里将近二十位作者全是男的。他们在词中要假托女性的口吻，表达女性的闺怨离愁，这样的双重性别也使得表面的文本有了多一层的联想可能性。&lt;/p&gt;

&lt;p&gt;所谓语码，是西方语言学的符号学中的说法，指的是在同一种传统文化背景下，往往形成了一些起着特殊作用的语汇，一旦你是用了它，就能够带出一大串有关的联想。在中文里尤其是这样，因为我们的文化传统积淀了好几千年，一些词语、一些意象在被经年的使用后产生了一些附加的意义。比如“梅花”总是代表高洁的品格、“簪花照镜”这样的动作常常隐性地表达作者爱惜羽毛之意。这些语码的组合，自然而然给这个文化传统下的读者带来文本之外更宽广的想象空间。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            蝶恋花 晏殊
    槛菊愁烟兰泣露，罗幕轻寒，燕子双飞去。明月不谙离恨苦，斜光到晓穿朱户。
    昨夜西风凋碧树，独上高楼，望尽天涯路。欲寄彩笺兼尺素，山长水阔知何处。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是写一个闺中寂寞的女子怀念离人的痛苦。上阕写晚间的孤独与寂寞，下阕写第二天早上，昨晚的风把树上的叶子吹落了，我一个人登上高楼，远望天边的路，那就是远方游子的方向。想给他寄一封信，可山高水长不知道要寄到哪里。这是相思的题材。但王国维看了“昨夜”这几句词，从中看出了“古今成大事业、大学问的第一种境界”。他联想到的是诗经里的“我瞻四方，蹙蹙靡所骋”，就是我看看四方，国家越来越狭窄了，危难越来越多了，我想要驰骋有所作为，却没有机会，是一种诗人对自己生不逢时的忧虑。晏殊有没有这个意思呢，我们不知道，这也是词的潜能，是值得玩味的地方所在。&lt;/p&gt;

&lt;p&gt;过于词的吟唱还要说一点，就是词是音乐性很强的，不像诗只分平仄，词是四声都会表现出来。我们今天普通话的读音和古人的读音已经有了很大的区别，比如现在普通话是不发入声的，粤语好像还有，但我不会说。而古人写的词里很多都用入声入韵，所以我们读到有些诗词的时候觉得好像不顺口，没有押韵。其实那是按古音写出来的，是没有错韵的。所以最好的欣赏方式还是按照古音来吟唱诗词。当然我不是很懂，有一小部分我能分辨出来，其他情况下就不会读了。所以我读基本上也是按我们现在的发音来读，个别我很清楚知道的地方改成古音。网上有一些叶嘉莹先生录制过的古诗词吟唱，有兴趣可以去听一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                菩萨蛮 温庭筠
    小山重叠金明灭。鬓云欲度香腮雪。懒起画峨眉。弄妆梳洗迟。
    照花前后镜。花面交相映。新贴绣罗襦。双双金鹧鸪。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;离骚里“众女嫉余之蛾眉兮，谣诼谓余以善淫”，峨眉在屈原这里是一种托喻的说法，象征他的才能和品德的美好。在后代文人的作品中，逐渐就延续了这样的传统，所以当“娥眉”这个语码出现时，常常使读者联想到自珍自爱的托喻。那“懒起画娥眉”呢？晚唐诗人杜荀鹤有句诗“早被婵娟误，欲妆临镜慵。承恩不在貌，教妾若为容” 别人已经不懂得欣赏了，我还有什么心思对着镜子画眉呢？所以温庭筠这里的“懒”字，就给了我们类似的想象空间。当然，到底温庭筠写词的时候是不是有这层意思呢，我们也不能一口认定。但这首表面写闺中少女梳妆打扮的小词，能使读他的人产生非常微妙的联想与感发，这正是这种文学体裁的妙处所在。而能否让读者在言下之意中品味出余味悠长的言外之意，也可以体现出一个作者的创作水平。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        浪淘沙 李煜
帘外雨潺潺，春意阑珊。罗衾不耐五更寒。梦里不知身是客，一晌贪欢。
独自莫凭栏，无限江山。别时容易见时难。流水落花春去也，天上人间。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这首词是李煜写的，非常有余味，在不同的语境下可以有很多联想和解释。来看最后一句，天上人间四个字就可以发散出很多种解释。比如联合上一句，可以理解为一种发问的语气“春天到哪里去了？是天上，还是人间？”还可以联系李煜的身世，和上阕里“梦里不知身是客”结合，理解为对自己遭遇的感慨，昔日如同在天上，而今只堕入人间。还可以结合理解为对“别时容易见时难”的展开，离别像流水落花一般容易，而再相见就像天上人间一样成为奢求。光是这一句就可以引发这么多种联想，这对于文学作品来说其实是一件难得的好事。&lt;/p&gt;

&lt;h2&gt;词的演化过程&lt;/h2&gt;

&lt;h3&gt;花间词&lt;/h3&gt;

&lt;p&gt;下面我们介绍一下词的演化过程。叶嘉莹先生的词学评论系统里，把词的发展主要分成三各阶段，歌词之词、诗化之词和赋化之词。我在这里介绍也就照搬她的主张。
花间集是我国历史上第一部词集，编于五代十国。是词的早期发展形态，这一时期的词以“艳丽香软”为主要特色，所写的对象基本是歌姬酒女，这些女子和之前文学作品中一般的女子形象，比如《诗经》里的女子形象相比，很大的不同在于词里的这些女子在社会家庭伦理关系中是没有归属地位的，他们不是良家妇女，他们存在于这个社会的状态是畸形的。而这一特点也影响了词的内容内涵，这样一来，词里的女子形象在剥离了家庭与伦理的归属之后，成为介于现实与非现实之间的“美色与爱情”的化身。这种抽象也造就了词，使词具有了更多象喻的可能性。
看一首温庭筠的小令，感受一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;              南歌子 温庭筠
    倭堕低梳髻，连娟细扫眉。 终日两相思。 为君憔悴尽，百花时。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;柳永：长调叙写&lt;/h3&gt;

&lt;p&gt;柳永在词的发展中也是一个很重要的人物。和之前的主流词人相比，他擅长写长调，和小令相比，长调更工于细致的描写以及层层递进的铺陈，把场景引入到一个更广阔的空间，各有各的美感。柳永很懂音律，所以他写长调可以很好的把我各种复杂的音律变化。这对歌词之词在语言形式上是一个发展。
我们来欣赏一首柳永的词，《定风波》，非常骚柔，感受一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                          定风波 柳永
    自春来惨绿愁红，芳心是事可可。日上花梢，莺穿柳带，犹压香衾卧。暖酥消，腻云亸，终日厌厌倦梳裹。无那，恨薄情一去，音书无个。
    早知恁么。悔当初、不把雕鞍锁。向鸡窗、只与蛮笺象管，拘束教吟课。镇相随，莫抛躲。针线闲拈伴伊坐。和我，免使年少、光阴虚过。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;诗化之词&lt;/h3&gt;

&lt;p&gt;我们高中的时候学词的时候，老师都会教词有婉约派和豪放派，婉约如李清照、晏几道，豪放有苏轼、辛弃疾。其实，词本身而言，就是婉约的，因为前面我们讲它的起源，之前就是给歌女写的歌词，是没有所谓“豪放派”一说的。后来到苏东坡，他开始用写诗的范儿来写词，让词可以有像诗一样的主题。苏轼比较喜欢和柳永比，他有个朋友就这么评价他和柳永的词，“柳郎中词，只合十七八女孩儿执红牙拍板，唱杨柳岸晓风残月。学士词，须关西大汉，执铁板，唱大江东去。”当然他这样的创新也不是所有人都认可，像一些顽固的原教旨主义词党，比如李清照，就认为苏轼这么写词，就已经不是词了，是“句读不茸之诗尔”。当然不是因为李清照不会抒写豪迈的感情所以才酸葡萄，李清照是写过很霸气的诗的，比如大家很熟悉的“生当做人杰，死亦为鬼雄。至今思项羽，不肯过江东。”她认为诗可以这么写，但词就要有词的范儿。
我们来一首苏轼的《定风波》，这是小令的定风波。和柳永的感觉比较一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                定风波 苏轼
    莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？ 一蓑烟雨任平生。
    料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;赋化之词&lt;/h3&gt;

&lt;p&gt;由于诗化之词并不好写，尤其是长调，容易陷入浅白，于是后来就有了用赋的手法来写词，以北宋周邦彦为代表。赋，讲究铺陈，讲究“体物言志”，体物，就是细致的观察、描述，体物言志就是通过铺陈的描写来表达思想。诗是感物言志，短小精悍，掌握的是心中感触的要点。但赋不是，赋要铺开来写。赋化之词以“体物言志”之法作词，抽离直抒感发的主体性，采用理性思索与技巧相组合，借用写赋技法，立意构思，勾勒成文。叶先生有一首诗来形容周邦彦的词“顾曲周郎赋笔新，惯于勾勒见清真”，别人都是越勾勒越淡薄，这个很容易理解，因为一个点反复的说就越来越无味，但周邦彦却可以越勾勒越浑厚。
看一首周邦彦的《兰陵王》，也被称为《渭城三叠》。体会一下这一类型的词作。主题是送别。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                兰陵王 周邦彦
    柳阴直，烟里丝丝弄碧。隋堤上、曾见几番，拂水飘绵送行色。登临望故国，谁识京华倦客？长亭路，年去岁来，应折柔条过千尺。
    闲寻旧踪迹，又酒趁哀弦，灯照离席。梨花榆火催寒食。愁一箭风快，半篙波暖，回头迢递便数驿，望人在天北。
    凄恻，恨堆积，渐别浦萦回，津堠岑寂，斜阳冉冉春无极。念月榭携手，露桥闻笛。沉思前事，似梦里，泪暗滴。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无论是柳词、苏词、还是周词，都各自发展出了一种虽不假借女性与双性，但仍然具有花间词之幽微要眇富含言外意蕴的特色相近的另一种双重性质的美。也就是说，这种富含引人联想的多层意蕴为美的美学特质仍然被继承并发扬光大了。在后来的历代的演进中，词的主题也逐渐变得多元，不仅限于美女与爱情了。叶嘉莹老师的这本书里还讲解了很多反应历史沉浮的词作和词人，我不举例了。我之前一直有印象是到了明清，诗词就已近衰落，好作品匮乏，这本书给我长了点见识，发现直到清末，仍然有非常好的词人词作。&lt;/p&gt;

&lt;h2&gt;词的批评与审美&lt;/h2&gt;

&lt;h3&gt;张惠言:文本的联想与感发&lt;/h3&gt;

&lt;p&gt;说到词的评论与审美，这里简单介绍两位影响比较大的词学家，张惠言和王国维。&lt;/p&gt;

&lt;p&gt;张惠言和王国维都提出过词的美感特质在于“低回要眇”，“能言诗之不能言，又不能尽言诗之能言”，是一种含蓄的“潜能”之美。不过张惠言的审美方法更注重文本的联想，从词的文字出发进行推敲比附。前面介绍过张惠言评价温庭筠的菩萨蛮，说“簪花照镜”有离骚“初服”之美。再来回顾一下这首词。他是从哪里读出来的？就是根据文本中的这些娥眉、照花的语码联系到中国的文化传统。有没有道理呢？是见仁见智了。王国维就批评张惠言的这套审美方法，说是“深文罗织”，牵强附会。&lt;/p&gt;

&lt;h3&gt;王国维&lt;/h3&gt;

&lt;p&gt;王国维就比张惠言更进了一步，他也指出了词的美在于“要眇宜修”，含蓄而余味深长，但从审美的方法论上说，他不认可张惠言那种直接从文本进行联想比附，而是要从感情的本质上进行联想与感发。这个抽象层次很微妙，拿言语很难描述清。“词之雅郑，在神不在貌”就是说评价诗词的优良品劣，要看它所表达的意思与情感，而不能仅凭所用的文字来判定。王国维在《人间词话》里还提出评价词的“境界”说，境界有大小之分，有“有我之境与无我之境”之分，当然他的这套东西比较抽象，不好掌握，意会可以，一旦指实，就韵味大减了。他自己批评张惠言“深文罗织”，自己也不是从前人写闺怨离愁的小词中读出“古之成大事者必经的三重境界”，可见词的欣赏解读是一件很微妙的事情。&lt;/p&gt;

&lt;h2&gt;一些感想&lt;/h2&gt;

&lt;h3&gt;理论与创作: 符号与符号背后的内涵&lt;/h3&gt;

&lt;p&gt;下面我谈一些读书过程中的一些零碎的感想。第一个是关于理论和创作的，就像我们今天可以用很多现代的文学理论去解释古人的诗词，从他们的创作手法中挖掘出一些契合文艺理论的东西来，古时的这些大师们，李杜苏辛，他们懂这些理论么？他们在创作时是不是考虑到了这些文艺理论的东西呢？显然没有，他们那个时代文艺理论还没有发展到这一步。但是，能说他们不懂文艺理论么？不能。他们非常懂，他们懂得不是这些被总结阐释后的创作理论，他们懂得是这些理论符号背后的内涵。就像有一些不识谱的优秀音乐人，他们不懂被抽象成符号的音乐理论，但他们对于如何运用节奏如个何让发出来的声音悦耳动人，他们非常懂。所以从这个意义上讲，“大师们不懂理论照样NB，所以理论无价值”这样的论调是站不住脚的。&lt;/p&gt;

&lt;h3&gt;诠释圈与读书:你所得到的，是你已经了解的&lt;/h3&gt;

&lt;p&gt;第二点是关于读书的。读一本书或者文章，你从中能读出什么内容，从中能得到什么启发，起到最重要作用的其实是你已经了解多少。就像牛顿被苹果砸悟出了万有引力，是因为牛顿本身对这个问题了解的足够深入，换个普通人砸完全没有用。再具体到计算机领域，我过去上学的时候也是觉得学一样东西应该只读masterpiece，才能有更高的领悟，是学习的“捷径”。其实现在看来，那些masterpiece是写给懂的人读的，只有懂的人才能从这些巨著中得到更多的灵感与启发，你能读懂多少取决于你已有的深度。一个领域的白丁，指望读masterpiece而“抄近路”成为master，基本是扯淡的。从反面也可以引出另一个观点，就是书，尤其是好书，一定是常读常新的。所以豆瓣除了“想读”、“在读”、“读过”之外，应该加上“读懂了多少”，或者类似武功修为一样“练到了第几层”。&lt;/p&gt;

&lt;h3&gt;艺术形式的流行与没落&lt;/h3&gt;

&lt;p&gt;第三点，是关于艺术的流行与时代的关系。艺术是表达人内心情感的工具。随着时代的发展，人们表达自己情感的方式在不停的演进，从诗经、乐府到唐诗、宋词、元曲，再到现代诗，每一个时代的人都找出更适合自己表达的艺术形式。并不一定说这种演进是对传统的背叛，也不是说哪门艺术是高雅的，哪门是低俗的。就像过去清中期京剧流行的时候大家认为昆曲是雅的，京剧是俗的，但现在呢，又认为京剧是雅的，流行音乐是俗的。说的好像哪门艺术没人听快死掉了，那它就是雅的一样。一门艺术的流行是因为它在表达能力上迎合了这个时代人主流的需求，没落的艺术自然各有自己独特的美，但没有必要所谓刻意去“挽救”、去“拯救”的必要，而且我也丝毫不认为他们会死去。他们会在喜欢他们的人群里活的很好，相信长尾的力量。&lt;/p&gt;

&lt;p&gt;(THE END)&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2013/06/19/poem-reading-share</link>
                <guid>http://blog.tomsheep.net/2013/06/19/poem-reading-share</guid>
                <pubDate>2013-06-19T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>淡定是一件礼物</title>
                <description>&lt;p&gt;说起来奇怪，从春节到现在我一直出乎寻常地淡定。一度我觉得可能是吃错了药（或者吃对了药），否则一个长年焦虑的人何以会毫无征兆地变得平和。在梳理了这几个月到底发生了什么变化之后，我谨慎地认为，就像许多彪炳史册的伟大发明创造一样，这是一个意外的副作用。&lt;/p&gt;

&lt;p&gt;春节的时候我决定做一个实验，一年都不要使用微博，看是否会获得更多可利用的时间。事实证明不会，对我而言每天专注的时间大概是一个稳定的数值，强行训练只会觉得效率低下。但这个决定产生了一些预期之外的效果——在基本脱离了熟人社交网络之后，很长时间里我都感到非常轻松，除了可以免受大量并不感兴趣的消息的轰炸之外，更有益的是发觉大好青春何必被自己的面具绑架：不用摆出一副业内人士的架势言必称“用户”“产品”;也不用装成技术大牛满嘴“语言”“架构”；更不用在一堆无趣的段子里苦苦扫出一条不那么无趣的，转发时搜肠刮肚地把这个包袱从另一个角度再抖一次……可以诚实一点不那么装，沉淀下来的才是本事，况且我还没有老到要（能）靠所谓“impact”混饭的年纪。&lt;/p&gt;

&lt;p&gt;在这样的心态下做事是很令人愉悦的，不会受到反馈——尤其是来自熟人的反馈的干扰，更容易依赖直觉做一些决策。我在IM状态里留了一个二维坐标，表示理论基础与工程能力，从（10000, 10000）开始递减，每天更新有效的付出时间，算作一个简单的激励。我把这个设计解释给一个前同事，他说太坑爹这得更新到猴年马月——其实没有多久，只要十年就可以了。十年前我显然没有这样的耐心。&lt;/p&gt;

&lt;p&gt;工作状况发生的一些变动也有所帮助，两个多月前我申请转入算法组的意愿得到迅速回应，然后一举混入了数据挖掘界。这让我由衷感叹“这是一个神奇的网站”。我入行两年，工种却已经换过好几个，有主动的也有被动的，除去一些微不足道的负面影响，对我而言这更多是种幸运。作为一个资深焦虑症患者，我过去喜欢说“这不是我想要的”，但究竟要的是什么，这真是一个世界级的谜题。从大学到雅虎再到豆瓣，有机会不停地尝试，算是为这道难题寻求一个“启发式”（heuristic）的解答。&lt;/p&gt;

&lt;p&gt;李开复喜欢说一句烂俗但我现在深以为然的话叫“Follow your heart”，把功利的、浮在表面的诉求剥开，找到真正打动自己的那一点，离答案就不远了。你以为自己想要一匹更快的马，实际上你需要一辆三蹦子。以前每听到同学朋友里“某某创业有了自己的买卖”，“某某去了斯坦福、CMU”，“某某拿了大offer去了硅谷”我都有些惆怅，觉得自己好像“落后”了，但又说不清到底“落后”了些什么。现在这种感觉是全然没有了，这大概是我最成功的自我“祛魅”。对我而言，弄清一件事运作的原理才是最大快感的来源，至于这一诉求以什么形式表现出来，倒是很其次的了。&lt;/p&gt;

&lt;p&gt;这几个月读书/读文章方法论上也有收获，据我总结就是始终抓住一条“为什么出问题——问题建模——解决问题”的线索，细节随意剥离或者展开都不会影响理解，能快速有效抓住重点。这不是什么新鲜的奇技淫巧，而是容易被忽视的最基本的阅读方法，几乎所有的非虚构作品都可以这样读，有助于理解内容，一旦理解，就很难遗忘。而且还可以用这个方法来检验一本书或一篇文章的写作质量，因为直接反映了作者头脑的清晰程度和表达能力。想到大学里熬夜死读书的场景，真是蠢哭了。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2013/06/01/know-how</link>
                <guid>http://blog.tomsheep.net/2013/06/01/know-how</guid>
                <pubDate>2013-06-01T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>《改变心理学的40项研究》笔记</title>
                <description>&lt;p&gt;《改变心理学的40项研究》是近期读过的一本心理学科普著作，收集了心理学研究史上40项具有划时代意义的实验：它们有的挑战权威、在当时引起了重大争议；有的开宗立派，成为后来研究者的理论源泉；有的已经成为已经成为众所周知的常识，而有的直到今天还是研究者们辩论的焦点。感谢这本书的作者耐心讲解和生动的描述，让非专业的读者了解到这个领域中精彩的故事。做一点摘抄：&lt;/p&gt;

&lt;h3&gt;学习和条件反射&lt;/h3&gt;

&lt;p&gt;弗洛伊德精神分析关于人类行为的基本观点是：行为的动力来源于无意识的本能和童年压抑了的内心冲突。但巴甫洛夫和华生为代表的行为主义的观念完全相反，认为行为是通过外在的不同环境和情境刺激产生的，即：情绪是习得的。被称为“行为主义之父”的斯金纳认为所有心理现象本质上都是行为的。所有的行为不管是内部的还是外部的，都可以由它产生的环境后果来解释。斯金纳甚至饲养了一批&lt;a href=&quot;http://book.douban.com/review/1242356/&quot; title=&quot;迷信的鸽子&quot;&gt;迷信的鸽子&lt;/a&gt;来证明自己的假设。&lt;/p&gt;

&lt;h3&gt;智力、认知与记忆&lt;/h3&gt;

&lt;p&gt;罗伯特·罗森塔尔提出的“皮格马利翁效应”就是我们所说的“自我实现的预言”，举个例子，小学老师得到学生的IQ测试分数，会下意识地对某些学生的潜能产生某种期望，给予他们更多的鼓励与鞭策，使学生产生自我实现的预期，从而更有可能获得成功。&lt;/p&gt;

&lt;p&gt;阿希的印象实验则试图向大家证明，在向一群被试描述一个陌生人时，改变一个描述词能引起被试对这个人整体印象的变化。他解释某些性格特征扮演核心角色，某些则相对边缘，个体的思维过程中这些特征是互相关联的。&lt;/p&gt;

&lt;p&gt;托尔曼并不同意传统行为主义严格的“刺激-反应”主张，他认为，经由感觉、注意、思维、期望、记忆和分析对刺激进行智力加工方式如果不比刺激本身更重要的话，也至少与后者同等重要。通过“&lt;a href=&quot;http://student.zjzk.cn/course_ware/zjxlx/experiment/Tolman_study.htm&quot; title=&quot;托尔曼行为实验&quot;&gt;认知地图&lt;/a&gt;”实验，他提出，学习者所学到的东西并不只是简单的机械的运动反应，而是达到目的的符号及其意义。而在之后的研究中，他又指出，对社会环境形成的综合地图对人类是有益的，而内涵单一的序列地图可能会使人陷入消极状态之中。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;过分强烈的动机或极度压抑的状态，使人类一而再再而三地误入盲目仇视外来者的歧途……我们不该让自己或他人过于情绪化、过于饥饿、过于衣衫褴褛，动机过于强烈，这些只能形成狭隘的序列地图。我们所有人必须保持平和的心态，吸收足够的营养，以便形成真正的综合性的认知地图……简而言之，当我们的孩子或者我们自己面对人类世界这一大迷宫时，我们必须使我们的孩子或我们自己（就像善良的实验者对待他的实验老鼠一样）处于能激发适度动机而没有多余挫败感的最理想状态中。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;人的发展&lt;/h3&gt;

&lt;p&gt;让皮亚杰提出，人类认知发展存在四个阶段：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;感觉运动阶段： 0-2岁, 思维与身体运动同步，&lt;a href=&quot;http://baike.baidu.com/view/621278.htm&quot; title=&quot;客体永久性&quot;&gt;客体永久性&lt;/a&gt;概念发展。&lt;/li&gt;
&lt;li&gt;前运算阶段：2-7岁，能进行象征性思维，非逻辑，万物有灵论，自我为中心。&lt;/li&gt;
&lt;li&gt;具体运算阶段：7-11岁，逻辑思维发展，能推断他人感受。&lt;/li&gt;
&lt;li&gt;形式运算阶段：11+ 假设概念、抽象概念，能思考哲学问题。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;哈罗关于婴儿对母亲依恋的&lt;a href=&quot;http://psychclassics.yorku.ca/Harlow/love.htm&quot; title=&quot;The Nature of Love&quot;&gt;研究&lt;/a&gt;，提出了“接触安慰”的重要性。&lt;/p&gt;

&lt;p&gt;兰格和罗丁关于“控制力”对人影响的解释我个人有切身的体会，他们通过实验试图告诉我们：当我们拥有控制力时，我们便是更快乐和更有成就的人。&lt;/p&gt;

&lt;h3&gt;情绪和动机&lt;/h3&gt;

&lt;p&gt;费斯廷格关于“认知失调”的定义：同时经历两种或以上彼此不协调的心里过程。当你的行为和你的态度发生矛盾时，你的态度将有所改变以与行为保持一致。而引起撒谎行为的压力越大（解释该行为的理由充分），改变原有观点的倾向越弱。&lt;/p&gt;

&lt;p&gt;他进一步指出认知失调的过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这种与态度不符的行为必须导致你不乐于接受的消极影响&lt;/li&gt;
&lt;li&gt;个人需对消极结果承担责任&lt;/li&gt;
&lt;li&gt;生理唤醒&lt;/li&gt;
&lt;li&gt;个体意识到所经历的生理唤醒是由自己所做的与态度不符的行为引起的&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;目前多数心理学家认为有两个基本过程可以改变一个人的原有观点和态度，一是反复劝说， 二是认知失调。&lt;/p&gt;

&lt;h3&gt;人格&lt;/h3&gt;

&lt;p&gt;罗特： 个体所具有的具体学习经历使其对强化是内控还是外控形成一种总体预期。（内控性格的人，深信自己能掌握自己的命运，而外控性格的人倾向于相信命运的安排起决定性作用）如果你已经习惯对自己的行为做内控或外控的解释，这影响到将来你在几乎所有情境中的行为。&lt;/p&gt;

&lt;p&gt;柯尔伯格：&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%9F%AF%E5%B0%94%E4%BC%AF%E6%A0%BC%E9%81%93%E5%BE%B7%E5%8F%91%E5%B1%95%E9%98%B6%E6%AE%B5&quot; title=&quot;柯尔伯格道德发展阶段&quot;&gt;道德发展具有阶段性&lt;/a&gt;。在皮亚杰研究的启发下，他将人类道德发展分为6个阶段，并认为&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个阶段都有一种独一无二的道德思维方式，而且不是对成人道德概念理解的逐渐深化。&lt;/li&gt;
&lt;li&gt;各个阶段总是以固定的顺序出现，不可能跳过任何一个阶段，也罕有倒退的情况出现&lt;/li&gt;
&lt;li&gt;阶段具有优势性。即儿童理解所有处于他们现有道德阶段以下的道德判断，且至多只能对他们所处阶段以上一个阶段的道德问题有某种程度的理解。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;心理病理学&lt;/h3&gt;

&lt;p&gt;罗汉森的实验更像是一场恶作剧，他招募了一批正常人来冒充精神病人，让他们去多家医院就诊，并且提供完全真实的信息（除了唯一的耳鸣症状），所有被试表现正常的行为。结果几乎所有医院都被钓鱼，无法分辨出真假病人。&lt;/p&gt;

&lt;p&gt;习得性抑郁：塞里格曼做了一个实验，发现狗在受到既不受他们控制也无法逃脱的一段时间点击后，即便在后来的环境中逃离的机会唾手可得，狗也学不会逃走。即：无助的狗和抑郁的人都从以往的特殊经历中习得自己的行为是徒劳的。这再次印证了“控制力”的重要性。&lt;/p&gt;

&lt;h3&gt;心理治疗&lt;/h3&gt;

&lt;p&gt;行为疗法与精神分析不同，不关心心理障碍的无意识根源和受压抑的冲突。它主张恐惧反应可以通过一个简单的条件反射程序而得到减轻。&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E6%9F%AF%E5%B0%94%E4%BC%AF%E6%A0%BC%E9%81%93%E5%BE%B7%E5%8F%91%E5%B1%95%E9%98%B6%E6%AE%B5&quot; title=&quot;柯尔伯格道德发展阶段&quot;&gt;系统脱敏&lt;/a&gt;就是这样的疗法。我最早听到“脱敏”这个词是在小学看到的一部电视剧里，主人公是警察，对红色有阴影，后来通过脱敏训练，反复练习射击装满红色液体的玻璃瓶来克服心理障碍。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/view/737941.htm&quot;&gt;墨迹测验&lt;/a&gt;和&lt;a href=&quot;http://site.douban.com/120314/widget/notes/4149553/note/178655297/&quot;&gt;TAT测验&lt;/a&gt;是著名的投射型人格测验，让被试自由地看并说出由此所联想到的东西（或联想一个场景），然后将这些反应用符号进行分类记录，加以分析，进而对被试人格的各种特征进行诊断。&lt;/p&gt;

&lt;h3&gt;社会心理学&lt;/h3&gt;

&lt;p&gt;拉皮尔观察到人存在“言行不一”的现象：如果想预测一个人在面对某一真实的特定情景或特定人物时将如何表现的话，对假设性情景的口头回答（即态度问卷）是远远不够的。只有研究真实社会情景中的人的行为，才能可靠地测量一个人的社会态度。（所以，“女友和母亲同时掉河里”的问题意义不大）&lt;/p&gt;

&lt;p&gt;那么，在什么时候，态度能成功预测行为？有研究指出，这些因素起关键作用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;态度强度&lt;/li&gt;
&lt;li&gt;态度稳定性&lt;/li&gt;
&lt;li&gt;行为与态度的相关性&lt;/li&gt;
&lt;li&gt;态度的显著性&lt;/li&gt;
&lt;li&gt;情景的压力&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;“&lt;a href=&quot;http://baike.baidu.com/view/481678.htm&quot;&gt;旁观者效应&lt;/a&gt;”则提出这样一个观点：围观的人越多，施以援手的人越少（全体中国人表示赞同）。达利和拉特那解释这是因为：提供帮助的责任扩散了，反过来因不提供帮助而受到的良心责备和内疚也扩散了。&lt;/p&gt;

&lt;p&gt;后来的研究有发现，当人们了解了“旁观者效应”后，他们会更乐意向危难中的人伸出援手。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2013/04/07/40-studies-that-changed-psychology</link>
                <guid>http://blog.tomsheep.net/2013/04/07/40-studies-that-changed-psychology</guid>
                <pubDate>2013-04-07T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>谈修养</title>
                <description>&lt;p&gt;昨天的一次同学聚会上有朋友要给我介绍对象，问我喜欢什么样的，我说最好是有点“情怀”的。情怀这个词太过抽象，在我看来和人品、眼界、志趣都有关系，但又很难具体描述。很容易让人和“文艺”产生联想，但其实没有本质联系。想到前两天读过朱光潜的一本小书叫《谈修养》，于是我说不如把“情怀”换个词叫“修养”吧——“修养”也不比“情怀”更容易让人理解，不过既然有大师圭臬在前，谈起来就有底气了很多。&lt;/p&gt;

&lt;p&gt;对于这本书我的态度是非常欣赏的，朱先生这本书里所表达的多数观点——尤其是关于教育的部分——很符合我的想法。在这里做一些书摘，也算是把这本书介绍给有缘来到这里的朋友。&lt;/p&gt;

&lt;p&gt;序言里有一句话我十分喜欢:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;我大体上欢喜冷静、沉着、稳重、刚毅，以出世精神做入世事业，尊崇理性和意志，却也不菲薄情感和想像。我的思想就抱着这个中心旋转，我不另找玄学或形而上学的基础。我信赖我的四十余年的积蓄，不向主义铸造者举债。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;无论是表达出的价值取向还是流露出的自信，都让我敬佩。当然我个人还远远做不到这一点，在这里就还要向朱先生“举债”，“盗言窃行”一番，借人之口浇自己心中块垒。这也应了“Fake it till you make it”的西谚，也算是成长的必由途径。&lt;/p&gt;

&lt;h3&gt;谈志气&lt;/h3&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从前的青年人病在志气太大，目前的青年人病在志气太小，甚至于无志气。志气太大，理想过高，事实迎不上头来，结果自然是失望烦闷；志气太小，因循苟且，麻木消沉，结果就必至于堕落。所以我们宁愿青年烦闷，不愿青年消沉。烦闷至少是对于现实的欠缺还有敏感，还可以激起努力；消沉对于现实的欠缺就根本麻木不仁，决不会引起改善的企图。但是说到究竟，烦闷之于消沉也不过是此胜于彼，烦闷的结果往往是消沉，犹如消沉的结果往往是堕落。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一是念头或愿望(wish)，一是起一个动作时所存的目的(purpose)，一是达到目的的决心(will，determination)。
“有志者事竟成”的“志”，须包含这三种意义在内：第一要起念头，其次要认清目的和达到目的之方法，第三是抱必达目的之决心。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是关于“有志者事竟成”比较好的阐释之一。这句古语表达了一种好的愿望，充满正能量，但可能产生一些反作用，因为有没有“志”和事能不能“成”没有必然的因果关系，受了“蛊惑”的有“志”青年碰壁之后往往投向犬儒主义的怀抱，正像这本书《谈青年的心里病态》一节中所说的，&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;他们由自己个人的生活空虚推论到一般人生的空虚，犯着逻辑学家所谓“以偏概全”的错误。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;因惧怕挫败而否定“志”的价值只能带来更负面的结果。《朝抵抗力最大的路径走》一节中的一番话也是对此的良好诠释：&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;许多人虽天天在“卑劣意识”中过活，却永不能发“男性的抗议”，只知怨天尤人，甚至于自己不长进，希望旁人也跟发“男性的抗议”，只知怨天尤人，甚至于自己不长进，希望旁人也跟着他不长进，看旁人长进，只怀满肚子醋意。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个人如果想奋发有为，最好是趁少年血气方刚的时候，少年时如果能努力，养成一种勇往直前百折不挠的精神，老而益壮，也还是可能的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;个体本位与社会本位&lt;/h3&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;就大体说，中国人以为一个人须先是自己是一个好人，对社会才会是好人，个人好，社会才能好；西方人以为一个人对于社会是好人，才算得是好人，社会好，个人就容易好。他们同以人好与社会好为理想，不过着重点不同，我们可以借用物理学的术语说，中国人的伦理观是“离心的”，由内而外的；西方人的伦理观是“向心的”，由外而内的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总之，社会转变不出两种方式，或由自变，或由人变。这两种方式也并不必彼此冲突。我们承认社会本身有一个常趋转变的大势，同时，我们也不能否认少数人的努力也往往可以促成、延滞，或移转这个大势。“时势造英雄，英雄亦造时势”，这句老话究竟不错。极端的唯物史观不能使我们满意，就因为它多少是一种定命论，它剥夺了人的意志自由，也就取消了人的道德责任和努力的价值。我们必须承认人力可以改造社会，然后我们遇着环境的困难才不会绝望，而我们的努力也才有意义与价值，我们也才能够说：把这世界安排得较合理想一点，是我们每个人的责任。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这段关于“唯物史观”和“英雄史观”的调和讲的很精彩，关于英雄崇拜，在《谈英雄崇拜》里另有一段，&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;从教育观点看，我们主张维持一般人所认为过时的英雄崇拜。尤其在青年时代，意象的力量大于概念，与其向他们说仁义道德，不如指点几个有血有肉的具有仁义道德的人给他们看。教育重人格感化，必须是一个具体的人格才真正有感化力。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;关于这一点我是持保留意见的，我不反对作为个人行为的英雄崇拜——那是个人自由——但不赞同在教育中以任何形式宣扬英雄崇拜，即便这么做是良好的初衷，并能带来“不坏”的效果。我认为教育需要保证最大的理性与中立，不主动引导人作出判断，而是将思考、批判与选择的方法与自由教/交给他们。&lt;/p&gt;

&lt;h3&gt;谈处群&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;在中国社会里，小群的活动特别踊跃，而大群非常散漫，意见偶有分歧倾轧冲突便乘之而起，都是因为部落主义在作祟。就表面看，同乡会、同学会、哥老会之类的组织颇可证明中国人能群，但是就事实看，许多不必有的隔阂和斗争，甚至于许多罪恶的行为，都起于这类小组织。小组织的精神与大群实不相容，因为大群须化除界限，而小组织多立界限；大群必扩然大公，而小组织是结党营私。我们中国人难于成立大群，就误在小组织的精神太强烈。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;朱先生认为解决处群问题关键在于教育与政治，要改良现状，必须把教育的着重点由上课读书移到学习做人方面去，而至于政治，则寄望于健全下层政治组织与政治公开。这本书写于抗战年间，距今已有70余年，在这两方面状况非但没有好转，还有每况愈下的趋势。&lt;/p&gt;

&lt;h3&gt;谈冷静&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;一般人欢喜拿文艺和科学对比，以为科学重理智而文艺重情感。其实文艺正因为表现情感的缘故，需要理智的控制反比科学更甚。英国诗人华兹华斯曾自道经验说：“诗起于沉静中所回味得来的情绪。”人人都能感受情绪，感受情绪而能在沉静中回味，才是文艺家的特殊修养。感受是能入，回味是能出。能入是主观的、热烈的；回味是客观的、冷静的。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;谈学问&lt;/h3&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学是学习，问是追问。世间可学习可追问的事理甚多，知识技能须学问，品格修养也还须学问；读书人须学问，农工商兵也还须学问，各行有各行的“行径”。学问是任何人对于任何事理，由不知求知，由不能求能的一套功夫。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般学子有两种通弊。一种是聪明人所常犯着的，他们过于相信自己的思考力而忽略前人的成就。其实每种学问都有长久的历史，其中每一个问题都曾经许多人思虑过，讨论过，提出过种种不同的解答，你必须明白这些经过，才可以利用前人的收获，免得绕弯子甚至于走错路。
另外一种通弊是资质较钝而肯用功的人所常犯的。他们一味读死书，古人所说的无论正确不正确，都不分皂白地接受过来，吟咏赞叹，自己毫不用思考求融会贯通，更没有一点冒险的精神，自己去求新发现，这是学而不思，孔子对于这种办法所下的评语是“罔”，意思就是说无用。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这两种通弊估计很多人都会躺着中枪，我也是深受其害，但我也认为这是不可避免的，所有人都需要在这条路上艰难的探索，螺旋上升。因此，朱先生认为，学校教育只有两个重要的功用：&lt;strong&gt;第一是启发兴趣，其次就是指点门径。&lt;/strong&gt; 而非灌输死板的知识。这也是我理想中的大学教育，不过在今日国内的状况下，似乎还比较遥远。&lt;/p&gt;

&lt;h3&gt;谈读书&lt;/h3&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;读的书当分种类，一种是为获得现世界公民所必需的常识，一种是为做专门学问。为获常识起见，目前一般中学和大学初年级的课程，如果认真学习，也就很够用。所谓认真学习，熟读讲义课本并不济事，每科必须精选要籍三五种来仔细玩索一番。常识课程总共不过十数种，每种选读要籍三五种，总计应读的书也不过五十部左右。这不能算是过奢的要求。一般读书人所读过的书大半不止此数，他们不能得实益，是因为他们没有选择，而阅读时又只潦草滑过。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能通就不能专，不能博就不能约。先博学而后守约，这是治任何学问所必守的程序。我们只看学术史，凡是在某一科学问上有大成就的人，都必定于许多他科学问有深广的基础。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些人读书，全凭自己的兴趣。今天遇到一部有趣的书就把预拟做的事丢开，用全副精力去读它；明天遇到另一部有趣的书，仍是如此办，虽然这两书在性质上毫不相关。它的好处在使读书成为乐事，对于一时兴到的著作可以深入，久而久之，可以养成一种不平凡的思路与胸襟。它的坏处在使读者泛滥而无所归宿，缺乏专门研究所必需的“经院式”的系统训练，产生畸形的发展，对于某一方面知识过于重视，对于另一方面知识可以很蒙昧。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;我虽然认识到这一点已经很久，但至今也没能完全克服这样的弊病。对此，这本书中还有一段，我认为是很好的药方：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;读书必须有一个中心去维持兴趣，或是科目，或是问题。以科目为中心时，就要精选那一科要籍，一部一部地从头读到尾，以求对于该科得到一个赅括的了解，作进一步高深研究的准备。读文学作品以作家为中心，读史学作品以时代为中心，也属于这一类。以问题为中心时，心中先须有一个待研究的问题，然后采关于这问题的书籍去读，用意在搜集材料和诸家对于这问题的意见，以供自己权衡去取，推求结论。重要的书仍须全看，其余的这里看一章，那里看一节，得到所要搜集的材料就可以丢手。这是一般做研究工作者所常用的方法，对于初学不相宜。不过初学者以科目为中心时，仍可约略采取以问题为中心的微意。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;谈恋爱与婚姻&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;就大体说，我赞成用很自然的方法引导青年撇开恋爱和结婚的路。所谓自然的方法有两种。第一是精力有所发挥，精神有所委托。一个人心无二用，却也不能没有所用。青年人精力最弥满，要他闲着无所用，就难免泛滥横流。假如他在工作里发生兴趣，在文艺里发生兴趣，甚至在游戏运动里发生兴趣，这就可以垄断他的心神，不叫它旁迁他涉。我知道很多青年因为心有所用，很自然地没有走上恋爱的路。第二是改善社交生活，使同情心得到滋养。青年人最需要的是同情，最怕的是寂寞，愈寂寞就愈感觉异性需要的迫切。一般青年追求异性，与其说是迫于性的冲动，毋宁说是迫于同情的需要。要满足这需要，社交生活如果丰富也就够了。一个青年如果有亲热的家庭生活，加上温暖的团体生活，不感觉到孤寂，他虽然还有“遇”恋爱的可能，却无“谋”恋爱的必要。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;谈美感教育&lt;/h3&gt;

&lt;p&gt;朱先生认为人类最上的享受是心灵的享受，包括“真善美”三种价值，分别对应学问、道德与艺术。而教育的功用就在顺应人类求知、想好、爱美的天性，使一个人在这三方面得到最大限度的调和的发展，以达到完美的生活。&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;美育不但不妨害德育而且是德育的基础。而且艺术和美育是“解放的，给人自由的”：第一是本能冲动和情感的解放。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其次是眼界的解放。我们通常把自己囿在习惯所画成的狭小圈套里，让它把眼界“蔽”着，使我们对它以外的世界都视而不见，听而不闻。比如我们如果囿于饮食男女，饮食男女以外的事物就见不着；囿于奔走钻营，奔走以外的事就见不着。有人向海边农夫称赞他的门前海景美，他很羞涩地指着屋后菜园说：“海没有什么，屋后的一园菜倒还不差。”一园菜囿住了他，使他不能见到海景美。我们每个人都有所囿，有所蔽，许多东西都不能见，所见到的天地是非常狭小的、陈腐的、枯燥的。诗人和艺术家所以超过我们一般人者就在情感比较真挚，感觉比较锐敏，观察比较深刻，想像比较丰富。我们“见”不着的他们“见”得着，并且他们“见”得到就说得出，我们本来“见”不着的他们“见”着说出来了，就使我们也可以“见”着。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三是自然限制的解放。在精神方面，人可以跳开自然的圈套而征服自然，他可以在自然世界之外另在想像中造出较能合理慰情的世界。这就是艺术的创造。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
                <link>http://blog.tomsheep.net/2013/03/31/on-accomplishment</link>
                <guid>http://blog.tomsheep.net/2013/03/31/on-accomplishment</guid>
                <pubDate>2013-03-31T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>矫枉过正</title>
                <description>&lt;p&gt;刚刚结束的&lt;a href=&quot;https://us.pycon.org/2013/&quot; title=&quot;PyCon 2013&quot;&gt;PyCon2013&lt;/a&gt;上出现一条引人注目的新闻，一名女布道师Adria听到坐在身后的两名男工程师的对话中含有“不雅”笑话&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Not cool. Jokes about forking repo&#39;s in a sexual way and &quot;big&quot; dongles. Right behind me.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;于是转身拍下二人的照片公布在twitter上，并在自己的&lt;a href=&quot;http://butyoureagirl.com/14015/forking-and-dongle-jokes-dont-belong-at-tech-conferences/&quot;&gt;博客&lt;/a&gt;中对二人进行声讨。媒体当然不会放过这样的吸引眼球的机会，几轮报道，将两名当事人推到风口浪尖。其中一名工程师旋即被自己的公司解雇。&lt;/p&gt;

&lt;p&gt;这是互联网时代经典桥段：弱势一方受到“不公正待遇”；依靠自媒体将事件公之与众；群情激愤舆论施压；“做坏事者”得到“应有”的惩罚。“正义”得到了伸张。&lt;/p&gt;

&lt;p&gt;当然，如果仅仅是这样，那互联网这个编剧只能算刚刚及格。这个经典模式还有他的下半部分：在PyCon事件中，被解雇的工程师mr-hank在Hacker News上发帖对自己不合时宜的玩笑表示道歉，同时解释Adria所指的两个有性暗示的笑话，关于“Dongles”的是确实是自己低级趣味和身旁工程师讲的三俗段子，但“Fork”一案纯属子虚乌有，真实的上下文是他们对演讲者的项目表示激赏，有兴趣做二次开发（“I would fork his
repo”），AdriaX人X心误解了他们的上下文。自己现如今丢了饭碗，老婆孩子生计都成了问题，非常懊悔。&lt;/p&gt;

&lt;p&gt;这个转变很微妙，mr-hank继Adria之后成为新的弱势一方（舆论总是会选择支持弱者），HN上的群众在跟帖中对mr-hank表示同情，认为他遭受的过分的惩罚，Adria多少有些无理取闹，hank只是在和身边的人扯淡，即便不雅也跟她无关。更有激进者挖坟称Adria是个伪淑女，自己前不久还在twitter上扯&lt;a href=&quot;https://twitter.com/adriarichards/statuses/312265091791847425&quot;&gt;荤段子&lt;/a&gt;……&lt;/p&gt;

&lt;p&gt;这个事件展开到这里，已经有点让人心寒了，这俨然是一个三输的局面，mr-hank因为嘴欠丢了工作，Adria也惹了一身骚，PyCon躺着中枪，出了这样的负面新闻，恐怕形象也会受损。共同点是，他们都遭受了本不应该属于自己的损失。在互联网自媒体时代，“正义”和“真相”变得近在咫尺，却又遥不可及，强大的舆论力量即可以众志成城挽狂澜于既倒，也可以众口烁金让你百口莫辩。给了你百家争鸣的自由，也让你失去思考的习惯。人在抱成一团时总是安全感爆棚，认为自己掌握了真理，不愿再多做哪怕一丝的斟酌；在手中有把刀时，甚至都不会想到其实“给对方一个耳光就可以了”。&lt;/p&gt;

&lt;p&gt;当然，也不必过度惊慌，以为这个时代的另一个特点就是它很健忘——看到有人专门做了&lt;a href=&quot;http://thisispycon.com/&quot;&gt;网站&lt;/a&gt;出来为无辜的PyCon辩解，以免这个优秀的会议遭到大众的误解——其实多虑了，要不了多久，大家就会完全遗忘这件事本身，或许只会留下一两句“What the fork”这样的俏皮话在程序员间流传。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2013/03/26/what-the-fork</link>
                <guid>http://blog.tomsheep.net/2013/03/26/what-the-fork</guid>
                <pubDate>2013-03-26T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>书同文，车同轨</title>
                <description>&lt;p&gt;这周用一些业余时间把06年以来在网络上公开发表过的日记、博客等文章整理到了一处，结束了长久以来“一坑未平，一坑又起”的局面。本次整理所得文章共214篇，来源遍及wordpress、diandian、blogbus、renren、QZone等服务。&lt;/p&gt;

&lt;p&gt;整理的过程是又枯燥又有趣的，枯燥的是，需要做大量的脚本工作与不可避免的人工编辑；而浏览这些旧文章则是这项工程中妙趣横生的部分。大体上讲，我是不太“忍心”看旧文章的，这也是我经常换坑的主要原因：每过一段时间，就会觉得过去写的东西非常糟糕，充斥着愚蠢和肤浅，恨不能马上与之划清界限，重新树立牛逼闪闪的品牌。今天也是一样，浏览这些文章时总觉得天雷滚滚，文章的作者真是一朵奇葩。所以整理时偶尔有些顾虑——要不要自己先和谐一遍，出一个“洁本”？&lt;/p&gt;

&lt;p&gt;最后我还是坚持把这些良莠不齐的文字按原貌整理出来，并按照时期与风格划分开来，给自己的网络生涯保留了一份完整的记录。分类名称全部用了四字书名，主要借用了王小波的时代系列：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;黑铁时代: 高中毕业到大学入学左右，基本上是文青风格，感性、敏感，用词比较讲究，文体很奇怪，但结构算比较完整。自我感觉比较良好，喜欢卖弄。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;青铜时代: 转入软件学院后到大三上学期, 有强烈的自我怀疑精神，过度紧张，自命不凡但忧虑会变得平庸。文章有非常统一的风格——就是没有主题，用生命在扯淡。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;白银时代: 大三下半年到毕业，姿态是“自我救赎者”，非常高产，基本是日记体，没有多少有质量的文章，但情感也更真实直接，显得不那么“装”。（感谢那时放下文青身段记了这么多流水帐）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;黄金时代: 毕业后至今的一些零散文章，数量极为有限，励志成分比较多。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;儒林外史: 2012年在点点网开的笔记系列，记一些突发的杂感和读书笔记，风格趋向微博，前期比较有活力。笔记内容质量不高，多数属于入门贴士，但试验出了一种不错的学习方法。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;朝花夕拾: 一些我觉得不太好按时代归类的文章，多数是怀旧主题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;天工开物: 技术贴，数量很少。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;我（目前）觉得这是挺有意义的一件事，一则是勾画出了一条个人青春时期的成长轨迹，非常有纪念价值（从这个角度讲这些日记与博客的数量不是太多而是太少了）；一则是解放了生产力，中央政府统一了度量衡，有利于产出更多的内容。&lt;/p&gt;

&lt;p&gt;合并后的博客host在Github Pages，对一些访问量比较高的文章url做了映射。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2013/03/23/blogs-merged</link>
                <guid>http://blog.tomsheep.net/2013/03/23/blogs-merged</guid>
                <pubDate>2013-03-23T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（8）</title>
                <description>&lt;p&gt;小结一下近期的ML学习：&lt;/p&gt;

&lt;p&gt;一开始进展非常缓慢，迷失在各种希腊字母和公式里，抓不到核心，也没有贴笔记，因为笔记只有在看懂了的前提下才会起加强理解的作用。后来耐下心查阅遇到的生僻概念，稍微补习了些概率知识，逐渐就没有那么唬人了。&lt;/p&gt;

&lt;p&gt;分析一下这一个多月学习遇到的困难，原因大概有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数学尤其是概率论基础比较差，冷启动比较吃力。大学里的《概率论》与《人工智能》课能翘的都翘了……（但这两门课哥都拿了A，哥“混”的能力不是盖的）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;李航的书不适合0基础学员。中国人写书有通病，就是“彪悍不解释”，懂的人怎么看怎么懂，不懂的人怎么看还是不懂。第一遍看到一半就接近天书了，看10分钟书得查2小时wikipedia。后来和Andew Ng的视频以及Tom Mitchell的《机器学习》结合着看，效果就好多了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习方法不好，一上来就抓算法，容易浮在表面，看不到模型背后的道理。Andrew Ng教程里有段话，我觉得说的太好，大意是“懂机器学习就像木匠会用工具一样，工具大家都会用，一个好木匠和一般木匠的差别在于知道如何选择工具，并且如何把它运用的更好”。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;这一个多月的笔记暂时不整理了，我觉得还不到时候，等有了所谓sense的时候再总结会更合适。简单列一下各主题的资料：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生成模型vs.判别模型&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sciencenet.cn/home.php?mod=space&amp;amp;amp;uid=248173&amp;amp;amp;do=blog&amp;amp;amp;id=227964&quot;&gt;科学网—判别模型 和 生成模型 - 龚书的博文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/jerrylead/archive/2011/03/05/1971903.html&quot;&gt;判别模型、生成模型与朴素贝叶斯方法 - JerryLead - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gooseeker.com/cn/node/knowledgebase/discriminative_generative_model&quot;&gt;什么是判别模型(Discriminative Model)和生成模型(Generative Model) | GooSeeker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/liliu/archive/2010/11/22/1883702.html&quot;&gt;最大似然估计(Maximum likelihood estimation) - 可乐LL - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑回归&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://52opencourse.com/125/coursera%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0-%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%85%AD%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-logistic-regression&quot;&gt;Coursera公开课笔记: 斯坦福大学机器学习第六课‘逻辑回归(Logistic Regression)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.163.com/liyanhua_08/blog/static/1172002772009927111741738/&quot;&gt;sigmoid函数详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/abcjennifer/article/details/7716281&quot;&gt;Stanford机器学习---第三讲. 逻辑回归和过拟合问题的解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人工神经网络：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wasd6081058/article/details/7909733&quot;&gt;人工神经网络（ANN）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wasd6081058/article/details/7886697&quot;&gt;线性学习器-----最小二乘法 Rosenblatt感知机 delta法则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持向量机&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/cc198877/article/details/8049203&quot;&gt;SVM入门（七）为何需要核函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/cc198877/article/details/8048668&quot;&gt;SVM入门（五）线性分类器的求解——问题的描述Part2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/VC_dimension&quot;&gt;VC dimension - Wikipedia, the free encyclopedia.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/marising/article/details/5888531&quot;&gt;结构风险最小和VC维理论的解释 - 李海波&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/5765845.htm&quot;&gt;结构风险最小化_百度百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/v_july_v/article/details/7624837&quot;&gt;支持向量机通俗导论（理解SVM的三层境界）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boosting&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/szv123_rier/article/details/7963541&quot;&gt;adaboost学习（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/LeftNotEasy/archive/2011/01/02/machine-learning-boosting-and-gradient-boosting.html&quot;&gt;机器学习中的数学(3)-模型组合(Model Combining)之Boosting与Gradient Boosting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;条件随机场&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhizhihu.com/html/y2010/2312.html&quot;&gt;随机场-Random Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wenku.baidu.com/view/f32a35d2240c844769eaee55.html&quot;&gt;条件随机场_百度文库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2013/01/15/notes</link>
                <guid>http://blog.tomsheep.net/2013/01/15/notes</guid>
                <pubDate>2013-01-15T23:52:31+08:00</pubDate>
        </item>

        <item>
                <title>祛魅2012</title>
                <description>&lt;p&gt;像我这样恨不得吃个饭都要总结一下的强迫症患者，每年到了岁末当然格外兴奋——又到了回顾与盘点这一年的所作所为所见所想的时候了，反思一下哪些地方做的好，哪些地方做的特别好。&lt;/p&gt;

&lt;p&gt;根据民间的说法，本命年是比较晦气的，诸事不利，需要格外谨慎低调。我妈恨不得把我全身上下都换成血红血红的服饰，武装到牙齿。但这似乎没有起到什么特别有效的制衡效果，全年还是一路磕磕绊绊，颇不顺利；再加上我本身就行为乖张，凭空也自找了很多麻烦。但到今天我写这篇年终报告的时候，我由衷为这些经历感到欣慰与庆幸，感谢它们带给我的成长。我仍然要重复曾经说过无数多次的话，“我大概是这个剧本的主角，每一次都能用很小的代价，换来无价的收获。”&lt;/p&gt;

&lt;p&gt;春节后回到北京没多久，yahoo messenger就被砍了，有些沮丧，而且有些愧疚感，在年前组内技术选型的争执中我也掺和的比较凶，最后项目被砍虽然原因复杂，但总觉得不是滋味，有点阴影，后来很长时间都厌恶参与有关技术优劣的讨论。团队解散后被安插在移动平台组放养了几个月，美国的大佬们忙着换CEO，产品方向飘忽难测，加上之前的解散风波冲得自己有些怨气和倦怠之气，本来已经日渐清晰的道路突然又迷茫了，稍作思索心一横决定离开。当然我还是要说yahoo是值得尊敬的雇主，在我已经决定离开的这段时间里，仍然得到了来自manager和HR的多方关怀与帮助，为此心怀感激。&lt;/p&gt;

&lt;p&gt;很多朋友都问我怎么下决心要走的，出于什么考虑，甚至还要赔户口违约金，我每次回答的都不太一样，因为我也很难搞清楚。我清楚的是我很固执，历史上一旦做了什么决定，基本上我自己都拉不回来。现在我想到一个好的回答，那就是，“让我再掷一次骰子”。我回顾了自己不同时期的很多选择，似乎都是在博一个更大的不确定性。用更装X一点的话，“为了让这个系统的熵更大一点”。&lt;/p&gt;

&lt;p&gt;当时去面了两家公司，知乎和豆瓣。本着“见见世面”的目的，看看这些有点意思的互联网产品是怎么做出来的。后来权衡一下来了豆瓣。有趣的是，当初面试的职位是前端，面试官根据我的履历倾向于安排我做客户端，而真正入职后的工种是Web后台，而实际上我现在最感兴趣的方向是机器学习。这几句戏谑的描述里其实概括了大半年来我对个人发展方向的反思和尝试。&lt;/p&gt;

&lt;p&gt;YM解散之后，原本逐渐清晰的发展方向变得有点模糊，我个人也开始试图做一些新的尝试，当时选的切入点是Web，主要侧重是Web安全与HTML5，原因是YM开发本身就涉及到了这些内容，转型起来比较平滑，后来离开yahoo另谋出路，起初也是试图转这条线的。后来决心去学习ML，则是一段相当长时间的低迷与“技术虚无感”笼罩下的反思结果。目前我无法多说太多，我相信这是一条很长的路，也因此更有魅力，也因此给予人信念。&lt;/p&gt;

&lt;p&gt;4月份开始我在点点上写一份笔记，为了吸引更多人来看，每一篇都会扯很多淡，效果确实很好，很多同事和朋友都成了我的读者——当然他们主要是来看扯淡的。在经历了一段长时间的反思后，我把它改名叫“祛魅”，这个名词的较正式的解释是“曾经一贯信奉的或被追捧的人或物或事或感情或文化或定论，受到新的认识后地位下降”。我觉得真是再贴切不过，这一年的种种成长与收获，无非“祛魅”而已。&lt;/p&gt;

&lt;p&gt;在这篇总结的最后，隆重感谢Girls&amp;amp;Gays（原Beijing Hot）的诸菜，这帮既善良又2B的DS是我在北京最好的朋友，也是我离开yahoo后感到最怀念的部分。“物以类聚”，我越来越相信这个道理。也感谢所有带过我的导师和leader（以及被我祸害过的项目）们、还有所有我喜欢过的和喜欢过我的姑娘们，没能让你们认识更好的我，“在我一生中常常追忆”。&lt;/p&gt;

&lt;p&gt;PS：昨天晚上发现@阿bug游魂野鬼 的签名改成了“想找个性格合适的靠谱妹子”，擦，不愧是基友，一下就说到哥的心槛儿里去了。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2012/12/21/disenchant-2012</link>
                <guid>http://blog.tomsheep.net/2012/12/21/disenchant-2012</guid>
                <pubDate>2012-12-21T22:00:00+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（7）</title>
                <description>&lt;h3&gt;Notes on《统计学习方法》(李航)-3：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;朴素贝叶斯法由训练数据学习联合概率分布P(X,Y), 然后求得后验概率分布，是一种分类+生成学习方法。它有一个强假设，就是输入特征之间满足条件独立性, 比如身高H和体重W为两个特征，他们之间满足&lt;code&gt;P(H=h, W=w|Y=c) = P(H=h|Y=c)P(W=w|Y=c)&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先验概率是指根据以往经验和分析得到的概率，如全概率公式，它往往作为“由因求果”问题中的“因”出现。后验概率是指在得到“结果”的信息后重新修正的概率，如贝叶斯公式中的条件概率，是“执果寻因”问题中的“因”。先验概率与后验概率有不可分割的联系，后验概率的计算要以先验概率为基础。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;朴素贝叶斯法的选择0-1损失函数，期望风险最小化即后验概率最大化 &lt;code&gt;f(x)=arg max P(c_k |X=x)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;朴素贝叶斯法中学习意味着估计先验概率&lt;code&gt;P(Y=c_k)和P(X=x|Y=c_k)&lt;/code&gt;，可以使用极大似然法或贝叶斯法估计。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最大似然法是要解决这样一个问题：给定一组数据和一个参数待定的模型，如何确定模型的参数，使得这个确定参数后的模型在所有模型中产生已知数据的概率最大。&lt;/li&gt;
&lt;li&gt;在最大似然法中，只考虑了由一个模型产生一个已知数据的概率，而没有考虑模型本身的概率。相对应的考虑了模型本身概率的方法，是贝叶斯估计（在随机变量各个取值的频数上加一个正数 λ）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/12/16/notes-7</link>
                <guid>http://blog.tomsheep.net/2012/12/16/notes-7</guid>
                <pubDate>2012-12-16T23:29:08+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（6）</title>
                <description>&lt;h3&gt;Notes on《统计学习方法》(李航)-2：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;感知机（perceptron）是二类线性分类模型：&lt;code&gt;f(x)=sign(w·x + b)&lt;/code&gt; ，输出为+1或-1；感知机对应于输入空间（特征空间）中的分离超平面&lt;code&gt;w·x + b = 0&lt;/code&gt; w是超平面的法向量，b是截距。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;补一段数学基础：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仿射空间: 给定的n维空间中，k维仿射空间由空间中的一点P和k个线性无关的向量v1,v2,v3,...,vk决定, 空间中的一条直线是一个1维仿射空间，一个平面是一个2维仿射空间。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;超平面：在给定的N维空间中，超平面由空间中的一点P和一个向量n决定，超平面方程为 &lt;code&gt;n*(i-P)=0&lt;/code&gt;，其中i表示超平面上的任意一点。i,n,p均为N维向量。n为超平面的法向量。若&lt;code&gt;i=(i1,i2,..,iN),n=(n1,n2,..,nN), p=(p1,p2,..pN)&lt;/code&gt;,则超平面方程可以表示成： &lt;code&gt;n1*i1+n2*i2+...nN*iN+d=0&lt;/code&gt;。二维空间的超平面是一条直线，三维空间的超平面是一个平面，而N维空间的超平面则是N-1维的仿射空间。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点到面的距离：&lt;code&gt;d=|向量AB*向量n|/向量n的模长&lt;/code&gt; d表示点A到面的距离，向量AB是以点A为起点，以平面上任意一点为终点的向量，向量n是平面的法向量。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;感知机的损失函数一般选为误分类点（就是分类错误，&lt;code&gt;wx_i +b&lt;/code&gt;和&lt;code&gt;y_i&lt;/code&gt;符号相反的点）到超平面S的总距离（因为这个函数连续可导，而且符合损失函数的要求）；所以感知机学习策略是极小化损失函数：&lt;code&gt;L(w,b) = -\sum{y_i(wx_i + b)}&lt;/code&gt;, &lt;code&gt;x_i&lt;/code&gt;为误分类点。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;感知机学习算法是基于“随机梯度下降法”对损失函数的最优化算法：随机选取一个超平面，然后一次选一个误分类点使其梯度下降，不断极小化目标函数。这个算法是收敛的，在训练数据集上的误分类次数满足不等式&lt;code&gt;k&amp;amp;lt;=(R/r)^2&lt;/code&gt;, &lt;code&gt;r = min(y_i(wx_i + b))&lt;/code&gt;, &lt;code&gt;R=max||x_i||&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;感知机只能处理“线性可分问题”：即特征空间中，存在某个超平面S：&lt;code&gt;wx+b=0&lt;/code&gt;，使得数据集中的正实例点和负实例点完全正确地划分到超平面两侧。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/12/16/notes-6</link>
                <guid>http://blog.tomsheep.net/2012/12/16/notes-6</guid>
                <pubDate>2012-12-16T23:04:42+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（5）</title>
                <description>&lt;h3&gt;Notes on《统计学习方法》(李航)-1：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;统计学习的方法是基于数据构建统计模型从而对数据进行预测和分析。统计学习的三要素：模型、策略、算法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在监督学习（训练数据既有输入也有输出）中，模型就是所要学习的条件概率或决策函数。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;策略：确定了假设空间后，就需要考虑按照什么样的准则学习或选择最优模型。监督学习的两个基本策略是经验风险最小化和结构风险最小化。风险函数是损失函数的期望，学习的目标就是选择期望风险（泛化误差）最小的模型。期望风险&lt;code&gt;R_exp(f)&lt;/code&gt;是模型关于联合分布的期望损失，经验风险&lt;code&gt;R_emp(f)&lt;/code&gt;是模型关于训练样本集的平均损失。当样本容量趋于无穷时，&lt;code&gt;R_emp(f)&lt;/code&gt;趋于&lt;code&gt;R_exp(f)&lt;/code&gt;. 通常用经验风险估计期望风险。 当样本容量过小时，经验风险最小化容易出现“过拟合”（模型过于复杂，对已知数据预测的好，对未知数据预测过差）；结构风险在经验风险上加上表示模型复杂度的正则化项(regularizer) J(f)，表示了对复杂模型的惩罚。正则化符合奥卡姆剃刀原理：在所有可能选择的模型中，能够很好的解释已知数据并且十分简单才是最好的模型。一句话就是be simple.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法指学习模型的具体计算方法。这时学习问题归结为最优化问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交叉验证的基本想法是重复地使用数据，把给定的数据进行切分，将切分数据集组合为训练集与测试集，反复进行训练、测试以及模型选择。常用方法有简单交叉验证（将已知数据随机氛围训练集和测试集）、S折交叉验证（将数据切分为S个大小相同的子集，S-1个用于训练，余下的作为测试集，对S种选择重复进行）、留一交叉验证（S折里S=N的特殊情况）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监督学习方法可以分为生成方法和判别方法。生成方法由数据学习联合概率分布P(X,Y)，然后求出条件概率分布P(Y|X)作为预测的模型（如朴素贝叶斯法和隐马尔可夫模型）；判别方法由数据直接学习决策函数f(X)或者条件概率分布P(Y|X)作为预测的模型，关心的是给定输入X，应该预测什么样的输出Y。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;生成方法可以还原出联合概率分布P(X,Y)，收敛速度更快&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判别方法直接面对预测，往往学习的准确率更高。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入变量X与输出变量Y均为连续变量的预测问题成为回归问题（学习过程等价于函数拟合）；Y为有限个离散变量的称为分类问题；X，Y均为变量序列的称为标注问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/12/16/notes</link>
                <guid>http://blog.tomsheep.net/2012/12/16/notes</guid>
                <pubDate>2012-12-16T22:36:21+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（4）</title>
                <description>&lt;p&gt;下午约见一位兄台，顺便一道听了一节刘鹏博士的讲座，大部分没有听懂，尴尬得连笔记都不知从何记起。倒是后来和这位兄台一起吃饭聊天，得到很多启发和帮助。&lt;/p&gt;

&lt;p&gt;当初大一初学编程时，曾经在某网站上受过他一些指点，多年后辗转来到北京，就此相识，也算是奇遇。今天又谈了些工作与学习的话题，主要和机器学习有关。故事的背景是我逐渐对这个领域有较深的兴趣，希望能在日常的“工程能力”之外，抓住一条深入发展的主线——用他的话说，就是“能玩一辈子的东西”。而他正好也是机器学习的爱好者，借此交流一下心得。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;他和我年龄相近，出道稍早，在一家网站带一个小团队，做过很多在我看来很有锻炼价值的实践，谈起来让人惭愧又羡慕。这再次让我觉得自己像是实验室里无土栽培的蔬菜，一路风调雨顺，拿着比他高一截的薪水，但不接地气，胸中无货手下没活。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;谈到机器学习，他分享了一些自己的经验，推荐并点评了一些领域里上手书籍的优缺点，告诉我从工程师的角度，从数学学起不是最好的切入点，直接入手机器学习的脉络，需要深挖时再回头来研究数学原理效果好的多。在实践中尤其是这样，跑在线上的东西往往是简单的模型。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;聊天中说到机器学习应用目前最为火热的“广告”，我说这大概是学术变现最好的领域之一了吧，他同意后说了一段我觉得很有见地的话，大意是：“赚不赚其实和领域关系没那么大，和‘人’的关系最大，有的人不论做什么领域，都能很好的变现，性格和气质使然。像我就不太适合，有点像羊。”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我提到我考虑过去读这个领域的博士，他很赞成，但我说青春可能就这么搭进去了，落得孤家寡人晚景凄凉如何是好，大家彼此摇头笑笑。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他打趣说，“你在线上那么霸气，在线下这么客气”——这个描述真是太有趣了。我觉得评价很到位，也很让人……闹心。所以说，我才像羊，汤姆羊。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/12/10/notes</link>
                <guid>http://blog.tomsheep.net/2012/12/10/notes</guid>
                <pubDate>2012-12-10T00:03:35+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（3）</title>
                <description>&lt;h3&gt;Notes on Linear Algebra 1:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;线性代数核心围绕矩阵的四大向量空间的特性以及其相互的关系展开，即列空间C(A), null空间N(A), 行空间C(A&lt;sup&gt;T&lt;/sup&gt;), left-null空间N(A&lt;sup&gt;T&lt;/sup&gt;)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若m * n的矩阵A的秩为r，&lt;code&gt;rank(A)=r&lt;/code&gt;, 则几大空间的维度&lt;code&gt;dim(C(A)) = dim(C(A^T)) = r&lt;/code&gt;, &lt;code&gt;dim(N(A)) = n-r&lt;/code&gt;, &lt;code&gt;dim(N(A^T)) = m-r&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C(A) 和N(A&lt;sup&gt;T&lt;/sup&gt;)互为R&lt;sup&gt;n&lt;/sup&gt;中的正交补, C(A&lt;sup&gt;T&lt;/sup&gt;)和N(A)互为R&lt;sup&gt;m&lt;/sup&gt;中的正交补。（两个子空间A、B正交，即A中任意向量与B中任意向量垂直，即点积为0；互为正交补则还需满足两空间维度和等于母空间维度）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线性方程组&lt;code&gt;Ax=b&lt;/code&gt;有解当且仅当向量b在C(A)空间中。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高斯消元在解线性方程组中用途很广&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;A = LU&lt;/code&gt;分解，左乘&lt;code&gt;L^-1&lt;/code&gt;变&lt;code&gt;Ax=b&lt;/code&gt;为 &lt;code&gt;Ux=c&lt;/code&gt;, 其中&lt;code&gt;L^-1&lt;/code&gt;可视作一系列转置矩阵（行变换）的乘积。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;求A的null空间，即解&lt;code&gt;Ax=0&lt;/code&gt;：求&lt;code&gt;rref(A)&lt;/code&gt;,化A为&lt;code&gt;[I F]&lt;/code&gt;形式，则其null空间的一组基为……擦，我打不出来了，脑补吧，阿门。（[-F//I] 发明一个标记//, 表示下面的I是排列在F之下的。）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Ax=b&lt;/code&gt;若有解，则其解为&lt;code&gt;x = xp + xn&lt;/code&gt;, xp为任一组特解， xn为N(A)的一般表达式。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消元中主元（pivots）的个数即为A的秩。主元所在的列构成C(A)的一组基；主元所在的行构成C(A&lt;sup&gt;T&lt;/sup&gt;)的一组基；另外，消元后的行也构成C(A&lt;sup&gt;T&lt;/sup&gt;)的一组基，但消元后的列就不是C(A)的基了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;投影：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;空间C(A)的投影矩阵&lt;code&gt;P=A(A^T A)^(-1) A^T&lt;/code&gt;; 使得向量b投影到空间A中：&lt;code&gt;p=Pb&lt;/code&gt;，则必有向量x使得&lt;code&gt;Ax=p&lt;/code&gt;； 相应的投影到N(A&lt;sup&gt;T&lt;/sup&gt;)中：&lt;code&gt;e=(I-P)b,  e + p = b&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;投影矩阵P具有特性：&lt;code&gt;P^T = P, P^2 = P&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;A^T*A&lt;/code&gt;是个对称的&lt;code&gt;n*n&lt;/code&gt;方阵。&lt;code&gt;A^T*A&lt;/code&gt; 和 A的秩是相等的（通过证明其null空间是相等的获证）。可推出有用的结论：如果A是列满秩的，则&lt;code&gt;A^T*A&lt;/code&gt;满秩。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最小二乘原理: &lt;code&gt;Ax=b&lt;/code&gt;转化为 &lt;code&gt;A^T*Ay = A^T*b&lt;/code&gt;。和利用微积分偏导进行推演殊途同归。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线性代数在图和网络中的应用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用edge-node incidence matrix（我不会翻译）表示n个点，m条边的有向图： 矩阵A，m * n，每一行代表一条边，如果这条边是从j指向k，则j列为-1，k列为+1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rank(A) = n - 1&lt;/code&gt;, &lt;code&gt;(1,1,1,1..)^T&lt;/code&gt; 必属于N(A)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果将x看作各点的电势，b则表示每条边两端的电势差，Ax=b有解的条件则可以用来描述Kirchhoffs Voltage Law： 环内电势差之和为0。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A的主元行（有n-1行）构成一个无环图（一棵树）。&lt;code&gt;N(A^T)&lt;/code&gt;的维度表示图有多少个小环（理解方式：&lt;code&gt;A^T y = 0&lt;/code&gt;的含义为： Flow in equals now out at every node。解&lt;code&gt;A^T y = 0&lt;/code&gt;则相当于找一组不汇聚到任一点的电流。）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;（# of nodes) - (# of edges) + (# of loops) = (n) - (m) + (m - n + 1) = 1&lt;/code&gt; ：这货就是欧拉定理。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，总结到一点就是：点点的编辑器不适合写公式。Q.E.D.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/12/06/notes</link>
                <guid>http://blog.tomsheep.net/2012/12/06/notes</guid>
                <pubDate>2012-12-06T07:46:37+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（2）</title>
                <description>&lt;p&gt;我觉得是时候重新开始做笔记了。好像停了很久，以至于再回来时点点网都面目全非了。这是我摸索出的切实有益的习惯之一，好习惯需要坚持。&lt;/p&gt;

&lt;p&gt;有些朋友偶尔问起“怎么看不到你的吐槽了？”，我总是说，“这是个心理问题。” 我对这个外交辞令非常满意，因为如果推而广之的话，几乎所有问题都是心理问题，无懈可击。几周前ccz过生日的时候聊天，问起我近期的感受，尤其是从yahoo到豆瓣的感受。我说：“过去我所吐槽的那些东西真的不见了，但我没有因此变得更加快乐。”我的语言表达能力一向很差，突然说出这么精准的话来，自己都吓了一跳。&lt;/p&gt;

&lt;p&gt;“慵懒”可能是我想到的形容词里和近一段时期我的心理状态最为接近的一个，后来慵懒之下，去看几本党史，发现或许比“慵懒”更恰当的比喻是：文革过后普通国人的心理状态。对技术的狂热顿时无从着落，从降温、疑惑转而生发出犬儒的一点情绪。所幸一份普通工程师的工作并不需要时刻保持对技术的无限热爱，多数情况下凭借惯性与经验就足够应付了。&lt;/p&gt;

&lt;p&gt;我在和BJ Hot的诸菜们聊天时说自己梦想的是“自由的生活状态”，但所有的自由都是建立在财务自由的基础之上的，所以多数的野心和激情也是为了这一目的做出的铺垫。现在梦想没有变，只是执行的人遇到了一点小状况，原因不详，大概只能归因为“心理问题”。&lt;/p&gt;

&lt;p&gt;意识到我如果不做技术再没有别的糊口方案，长成这样恐怕连切糕都卖不了，遑论生活自由了。但这是一个循序渐进的过程，先从这份笔记开始吧。内容涉及的领域我还没有想请楚，两个月前我对组内同事说对Haskell有些兴趣，其实现在已经兴致不高，但对于历史遗留问题，我认为是需要做出交待的。还有，也许不会有太多吐槽内容了，哥在成长，吐槽这种没品的事，还是……还是留给新浪微博吧。更何况我是一个病人，你们也忍心让一个病人讲笑话给你听？&lt;/p&gt;

&lt;p&gt;谁说忍心？好吧，你就是三楼楼长了。&lt;/p&gt;

&lt;p&gt;这是最近看过或正在看的一些有益的书与课程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;麻省理工公开课： &lt;a href=&quot;http://v.163.com/special/opencourse/daishu.html&quot; title=&quot;线性代数&quot;&gt;线性代数&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linear Algebra and Its Applications Fourth Edition, by Gilbert Strang&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哈佛大学公开课： &lt;a href=&quot;http://v.163.com/special/sp/positivepsychology.html&quot; title=&quot;幸福课&quot;&gt;幸福课&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/12/04/notes</link>
                <guid>http://blog.tomsheep.net/2012/12/04/notes</guid>
                <pubDate>2012-12-04T22:51:15+08:00</pubDate>
        </item>

        <item>
                <title>祛魅（1）</title>
                <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;读一本书，作者起先大讲“人格失调证”和“神经官能症”，他们的症状分别是“I can not”和“I should have”，这让我很为难，按我这个病情到底应该确诊为哪一类好呢？真是伤脑筋，正一筹莫展之际，作者充分展示出其人文关怀的一面，旋即抛出“人格神经官能症”一词，问题遂解。整个世界都清净了。—— 可见占星术不愧是当世显学，果然是一门有极深奥义的学问。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;&lt;p&gt;Xiping: 什么是“开光”？&lt;/p&gt;

&lt;p&gt;Kang: 就是一种仪式，比如你请（买）了一件法物，找有道行的法师帮你诵经念咒，你的宝贝就有灵性了……&lt;/p&gt;

&lt;p&gt;Xiping: 你直接说“激活”我就懂了。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在蜂巢看完《两只狗的生活意见》后直赞叹，演员真是好本事。笑料和演技撑起了这部戏，推进的游刃有余。如果把核心单抽出来的话，肯定就拧巴了。立时从一部雅俗共赏人民群众喜闻乐见的话剧变成“人格神经官能症”患者治愈片了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其实看过这么多喜剧，在我心目中最伟大的喜剧作品人物没有之一一直都是：于谦的父亲。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;看完演出回家的地铁上ccz拿着手机问我他下的小说是不是伪本的《废都》。一看就是假的，都没有“口口口口口口”…… 后来我们就很严肃地探讨《金瓶梅》《觉后禅》等古典文学名著了——笑点是什么？笑点是我们是真 在
很严肃的探讨……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么很久不更新，然后笔记就改名字了？最近一个月都在看小说，看得就要“人格神经官能症”了，觉得还是回来扯扯淡吧。 而且扯淡这么高雅的事情，怎么能让不入流的技术笔记玷污了去呢？ “祛魅”是什么意思？我大概是这么觉得的，当你看到这个标题的时候，肯定会是这个反应：我去，你妹啊。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/10/22/notes</link>
                <guid>http://blog.tomsheep.net/2012/10/22/notes</guid>
                <pubDate>2012-10-22T23:46:56+08:00</pubDate>
        </item>

        <item>
                <title>屌丝的自我修养（95）</title>
                <description>&lt;h4&gt;翻译：Monad是什么鬼东西？&lt;/h4&gt;

&lt;h4&gt;作者：Noel Winstanley, 1999&lt;/h4&gt;

&lt;h4&gt;免责声明：本文翻译自网络文章 &lt;a href=&quot;http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/MONADS/Noel/research/monads.html&quot; title=&quot;What the hell are Monads?&quot;&gt;What the hell are Monads?&lt;/a&gt; ，版权归原作者所有，译文仅供学习、研究、参考之用。&lt;/h4&gt;

&lt;h3&gt;介绍&lt;/h3&gt;

&lt;p&gt;有不少人请我讲讲关于monad的事情，在邮件列表中我也看到了类似的呼声，于是便有了这篇介绍单子（monad）、单子编程(monadic programming)与IO的文档。这篇文章主要以例程（而非纯理论）示人， 并假定读者对Haskell有初步的了解。Maybe 曾几何时，人们写Haskell程序是通过一种特定的方式把操作序列化起来的。Prelude模块中Maybe类型是这样定义的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它可以被用来为失败操作建模（用通用的方式处理failure），例如，下面这个类型的函数&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以接受一个a，其结果要么产生一个b（被Just构造器包装），要么失败返回Nothing。&lt;/p&gt;

&lt;h3&gt;举例&lt;/h3&gt;

&lt;p&gt;一个数据库应用中，查询操作可能具有下面的形式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数将一个Query作用于DB之上，它的返回值要么是一个Record，要么失败返回Nothing。如果程序员想运行一系列的query操作，前一个查询的结果作为下一个查询输入的一部分，那他必须在每一个查询之后进行显式的错误检查：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随着嵌套的加深，情况就有些让人恼火了。所以一个有节操、希望重用代码的程序员定义了下面的combinators，用来完成这个模式下的错误检查。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;thenMB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenMB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mB&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们用thenMB这个combinator来重写上面的数据库操作代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenMB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenMB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenMB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这下代码看上去简洁顺眼多了，无论理解还是读写调试都便利不少，而函数的功能和类型和原来的版本是完全一样的。&lt;/p&gt;

&lt;h3&gt;State&lt;/h3&gt;

&lt;p&gt;另一个常见的计算模型是，通过一系列的函数来“线性”修改状态：每一个函数接受一个状态并返回一个修改后的状态版本。这些函数被称之为状态转换器（State Transformer），我们定义一个类型别名来说明：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回到刚才的例子, 还是在数据库应用中，有添加、删除记录的操作：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;addRec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delRec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每一个状态转换器都接受一个Record和旧的数据库实例，返回一个新的数据库，连同一个布尔类型的标识来表明操作是否成功。使用上面我们定义的类型别名，这些状态转换器可以写成：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;addRec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delRec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因此addRec和delRec就是被Record参数化了的状态转换器。但是，目前使用这些状态转换器来编程还是有些别扭：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;newDB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;newDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addRec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addRec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delRec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db2&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码在数据库中添加、删除了一些记录：返回新数据库和所有操作布尔标识的“合取值”（交）。注意这里每一个状态转换器产生的新数据库和布尔标识必须显式地传给下一个转换器。这会变得很难调试，因为中间步骤中很容易不小心传错值。
又是这个有节操的程序员，吸取了Maybe的经验后，定义了一个combinator来序列化状态转换器：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;thenST&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;thenST把前一个状态转换器的状态结果传入下一个转换器。这里定义另一个combinator，returnST，它的作用是把一个普通的值升格（lift）成一个状态转换器：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;returnST&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returnST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用这些combinator后，上面的例子就可以写作：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;newDB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;newDB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addRec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;addRec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delRec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thenST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returnST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里这些combinator负责数据库在状态转换器间的线性传递：这个编程模式和Maybe例子中的thenMB有异曲同工之妙。显然，这个“利用combinators来管理参数传递以及运算流”的编程模型是结构化代码、让程序更清晰的利器。事实上，这个思想还可以用到其他很多计算模型中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据结构：列表、数、集合&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运算流：Maybe、错误报告、non-determinism&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传值：StateT、环境变量、输出生成&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和外部环境交互：IO、GUI、foreign language interfaces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另外一些诡异的东东：combinator解析、并行、可变数据结构&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;于是乎，终于轮到Monad出场了&lt;/h3&gt;

&lt;p&gt;如果上面这些模型都可以使用一套combinators那就再好不过了，这样一来不进可以有统一的标记符，还能为这些模型编写通用的类库。幸运的是，monad已经使这一切变成了现实。monad是一种类型，在它之下定义了两个操作符，分别是then和return，这两个操作符满足下列法则：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Monad“类型类”&lt;/h3&gt;

&lt;p&gt;Haskell为Monad定义了一个类型构造器：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;中缀操作符&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;就是所谓的&quot;then&quot;, 而且这里还定义了&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;的一种特殊情况：&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;，这种情况下忽略前一个动作(action)的结果。现在，任何实现了这些combinators的类型可以视为Monad类型类的一个实例。举个栗子，Maybe就可以这样定义：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thenMB&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;StateT也可以照猫画虎一般给出定义。&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Haskell不允许用类型别名作为类型类的实例，所以我们需要重新用data声明语句重新定义StateT，并且调整thenST和returnST的定义以满足类型构造器的需要。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于Monad类型类的所有实例，上面的那几条法则必须适用。但Haskell编译器是没办法强制检查那几条法则的，全看程序员的节操。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;现在所有monad都有了一个共同的标识符，通用的combinators可以被定义出来。Prelude模块包含了一些这样的combinators，更多的则位于Monad模块中。其中一个例子是来自Prelude中的sequence：接受一个列表的monadic运算，执行每一个并将他们的结果用一个列表返回。使用Monad类型类中的combinators来定义它：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Do标识符&lt;/h3&gt;

&lt;p&gt;Haskell在monadic编程中支持“Do”这个语法糖：Do可以翻译成 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;then&lt;/code&gt;等combinators, 结合示例更好理解。例如，Prelude中的accumulate这样定义：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;accumulate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accumulate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accumulate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本的规则是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;do关键字引入一些列monadic运算，用缩进来间隔（就像let表达式那样）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;-&lt;/code&gt;用来把一个变量&quot;绑定&quot;到一个monadic运算的结果上。（代替使用&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那些忽略运算结果的运算可以直接用间隔来表示（无需&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;操作符）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;do语句必须以&lt;code&gt;return&lt;/code&gt;或者一个monadic运算（非&lt;code&gt;&amp;lt;-&lt;/code&gt;）结束&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;深入Monadic类型&lt;/h3&gt;

&lt;p&gt;Haskell还包含了许多与monad相关的类型类。这里我们就不详加介绍了。我才不会告诉你他们是Functor和MonadPlus呢。（分别在Prelude和Monad模块中定义）&lt;/p&gt;

&lt;h3&gt;Monadic IO&lt;/h3&gt;

&lt;p&gt;输入/输出是纯函数式编程语言中老生常谈的问题。这些（纯函数式）编程语言的一条神圣不可侵犯的条例是：每一个函数必须可以被它的参数所确定（译者按：即是“引用透明”的，意思是同样的参数必然得到同样的结果）。然而，对于IO操作来说这是不可能的。举例来说，让我们定义一个getChar函数，从一个FileHandle中读出一个字符：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;getChar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileHandle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不幸的是，这个函数每次调用并不一定会返回相同的值。这是因为它取决于读取时文件的状态，每次getChar都会改变这一状态。
一个解决方案是，把状态显式地传给getChar并返回一个新状态。我们把这个状态泛化称作World，于是getChar函数变为：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;getChar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileHandle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用这个技巧，每个IO函数传入一个World状态，返回一个改变后的World。看上去不错——似乎实现了“引用透明”。然而，我们需要保证每个World状态只被使用过一次（如果一个World可被使用多次，那意味着程序必须维护所有之前的World状态，这是及其低效的） 一个解决方法（Clean语言就是这样做的）是引入 Uniqueness Types——拓展类型系统来保证World值只被使用一次。但Haskell有自己的高招，它用monad解决了“单次使用”的问题。注意getChar只是一个状态转换器，可以被重写成：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;getChar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileHandle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在使用以stateT定义的monadic combinators，我们就能保证每个World只被传入了一个IO函数，并且将新产生的状态传入下一个IO函数。唯一遗留的问题是World可以在这个运算序列的结尾处被访问到，留下了可以被误用的可能性（比如把结果状态传入两个新的StateT运算）这可以用一个被称作IO的ADT来解决，这个ADT是Monad类型类的一个实例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ADT的关键特性在于程序员无法访问其类型的内部组件。这就阻止了IO操作返回的World被程序员任意操作。getChar现在可以写作：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;getChar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileHandle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行IO操作的唯一途径是定义&lt;code&gt;main::IO()&lt;/code&gt;，其中包括一系列IO操作。main函数显式传入world状态到IO操作序列，这样运行顺序就得到了保证。
注意：类型IO()用来标识无返回值的IO操作，言下之意就是只关心其“副作用”(side-effect) 例如&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;putChar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;IO Monad编程&lt;/h3&gt;

&lt;p&gt;Prelude模块定义了标准输入输出流上的IO函数，IO模块则提供了更高级的针对文件句柄的IO函数。另外，许多通用的Monad combinators在IO编程中也十分有用。
IO函数不仅有针对单个字符的操作，还有更加强大的如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;n&quot;&gt;getContents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;getContents和readFile“惰性地”读入一整个输入流，返回一个惰性列表（译者按：只在需要其值时进行运算）writeFile则相反，写入一个（可能是惰性的）列表到文件。
这是一个优雅地实现读取输入到程序、同时保证大部分的程序逻辑是“无Monad”的途径。用一个简单的Unix工具wc作为例子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArgs&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nWords&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nLines&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nChars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nLines&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nWords&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nChars&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;usage: wc fname&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;getArgs :: IO [String]&lt;/code&gt;返回命令行参数列表&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查命令行参数是否合法（只包含一个filename）如果不合法则打印帮助信息然后退出；否则文件被惰性地读入并进行统计&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计中使用&lt;code&gt;length :: [a] -&amp;gt; Int&lt;/code&gt;来计算单词、行以及字母列表的长度。前两个列表是分别通过 &lt;code&gt;words :: String -&amp;gt; [String]&lt;/code&gt;和 &lt;code&gt;lines :: String -&amp;gt; [String]&lt;/code&gt;两个函数计算出的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计结果在putStrLn打印之前被&lt;code&gt;show :: Show a =&amp;gt; a -&amp;gt; String&lt;/code&gt;和&lt;code&gt;unwords :: [String] -&amp;gt; String&lt;/code&gt;格式化。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意do代码块的嵌套，以及case、let语句的缩进&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意到我们必须在case语句前使用getArgs操作并把其结果传入case，不能直接&lt;code&gt;case getArgs of ..&lt;/code&gt;，因为getArgs具有IO [String]类型，而非[String]，ADT无法用于模式匹配。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个解决方案是低效的：它便历了文件内容五遍。一个更高效的实现应该并行进行统计，或者使用自制的遍历函数，或者使用foldr.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;总结与延伸阅读&lt;/h3&gt;

&lt;p&gt;在伟大光荣正确的党的带领下（译者按：信达雅），monads看上去不像当初那么晦涩难懂了呢。一旦对它有所理解，就可以用monad来解决很多问题，它在构建大型系统时很有帮助。实话告诉你吧，monad甚至有一种被过度使用的危险（我不就是一个么），以至于会忘记使用Haskell本身的纯函数范式。
市面上有很多关于monad的公开著作，但是，他们中的很大一部分都是面向理论学者的，而非普通程序员。这里有一些互联网上可以找到的资料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;理论: Phillip Wadler 是把Monad引入函数式编程的研究人员之一。他维护着一个&lt;a href=&quot;http://cm.bell-labs.com/cm/cs/who/wadler/topics/monads.html&quot; title=&quot;详尽的列表&quot;&gt;详尽的列表&lt;/a&gt;，里面是他关于monad的著作。可能会让你觉得有点难读，标注符号和Haskell也有区别，但绝对值得一看。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Monadic Parser Combinators： Graham Hutton 和 Erik Meijer发表了一篇教程性质的 &lt;a href=&quot;http://www.cs.nott.ac.uk/Department/Staff/gmh/bib.html#pearl&quot; title=&quot;论文 &quot;&gt;论文&lt;/a&gt;，介绍monads在通用结构化编程中的应用。parser combinator类库也有提供，值得拜读。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他：Simon Peyton Jones有一个 &lt;a href=&quot;http://research.microsoft.com/Users/simonpj/Papers/papers.html&quot; title=&quot;论文列表&quot;&gt;论文列表&lt;/a&gt; ，收录了他和他的同事的作品。其中相关的有 &lt;a href=&quot;http://research.microsoft.com/Users/simonpj/Papers/papers.html#applications&quot; title=&quot;foreign language integration&quot;&gt;foreign language integration&lt;/a&gt; , &lt;a href=&quot;http://research.microsoft.com/Users/simonpj/Papers/papers.html#monads&quot; title=&quot;monads, state &amp;amp; concurrency&quot;&gt;monads, state &amp;amp; concurrency&lt;/a&gt; , 以及 &lt;a href=&quot;http://research.microsoft.com/Users/simonpj/Papers/papers.html#gui&quot; title=&quot;graphical user interfaces&quot;&gt;graphical user interfaces&lt;/a&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://blog.tomsheep.net/2012/09/25/notes</link>
                <guid>http://blog.tomsheep.net/2012/09/25/notes</guid>
                <pubDate>2012-09-25T00:46:19+08:00</pubDate>
        </item>

        <item>
                <title>屌丝的自我修养（94）</title>
                <description>&lt;p&gt;在硬盘里淘老软件竟有在旧书摊淘旧书的乐趣。这个MAME模拟器告诉我，每一个遥远的游戏都是一段故事：&lt;/p&gt;

&lt;h3&gt;《卡迪拉克与恐龙》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/dinosaurs.png&quot; alt=&quot;卡迪拉克与恐龙&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cadillacs_and_Dinosaurs_(video_game)&quot; title=&quot;《卡迪拉克与恐龙》&quot;&gt;这款游戏&lt;/a&gt;在上世纪90年代风靡一时，占据了大小街机店的重要位置。故事改编自漫画《&lt;a href=&quot;http://en.wikipedia.org/wiki/Xenozoic_Tales&quot; title=&quot;Xenozoic Tales&quot;&gt;Xenozoic Tales&lt;/a&gt;》。故事背景设定在26世纪，那是地球污染问题严重，人们建立了大量地下城市来居住，而地面上又成为恐龙们的乐园。反派人物Simon Fessenden博士建立实验基地企图利用恐龙控制世界。游戏有四个主人公，有趣的是真正的主角Jack(白人小伙)和 Hannah（性感能打的美女外交官）并没有得到多数玩家的追捧，反而是图中这个头戴黄帽的工程师Mustapha以其敏捷的身手大受玩家欢迎，成为事实男一号，以至于这款游戏在坊间广泛流传着“工人”“黄帽”等别称。&lt;/p&gt;

&lt;h3&gt;《铁钩船长》：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hook.png&quot; alt=&quot;铁钩船长&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也是同时期的流行街机游戏。漫画电影都有原型（看这里电影《&lt;a href=&quot;http://movie.douban.com/subject/1298692/&quot; title=&quot;铁钩船长&quot;&gt;铁钩船长&lt;/a&gt;》），故事主线是彼得潘从大反派Hook船长手中救孩子的故事。我没有看过电影，第一次了解到这个背景（谁又会在八九岁的时候有兴趣了解一款游戏讲的是什么故事？）游戏开场动画第一个镜头是一封信“Dear Peter, your presence is required at the request of your children. Kindest personal regards, Jas. Hook, Capt”，看到电影的剧情介绍里也有完全相同的文案。&lt;/p&gt;

&lt;h3&gt;《吞食天地II-赤壁之战》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sanguozhi.png&quot; alt=&quot;三国志&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这款游戏的好处在于故事不需要介绍，几岁的小孩上手就知道怎么回事。三国的几个桥段然后加上各种穿越的人物构成。主角人物是改良后的五虎上将，马超换成了魏延（大概是因为马超形象和赵云过于相近，没有辨识度，所以没有被“蜀国好将军”节目组录用）。截图其实是“世界版”，和通常见到的日文版有一些差别，名字都改的很奇怪，刘备叫做Kuan-Ti, 而真正的“关帝”改名叫做Portor，赵云则叫Subutai。剧情似乎也有出入，最明显的是没有了双结局，印象中是应该有“释放曹操”的选项的。&lt;/p&gt;

&lt;h3&gt;《四国战机3》&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/air_fighter.png&quot; alt=&quot;四国战机3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这款游戏的故事背景我还是没有完全看懂，只搞清四国是美国、日本、英国、瑞典。&lt;/p&gt;
</description>
                <link>http://blog.tomsheep.net/2012/09/23/notes</link>
                <guid>http://blog.tomsheep.net/2012/09/23/notes</guid>
                <pubDate>2012-09-23T22:14:43+08:00</pubDate>
        </item>

        <item>
                <title>屌丝的自我修养（93）</title>
                <description>&lt;p&gt;由于有了看电影的契机，重新来回顾一下小说，关注一下作者是怎么讲故事的的。&lt;/p&gt;

&lt;p&gt;《白鹿原》小说骨架：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;白嘉轩的克妻命：故事的背景介绍是围绕白嘉轩的6个亡妻展开的，白家几辈单传，对延续香火有着急切的愿望。第六任妻子去世后，白嘉轩决定找个阴阳先生。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;找阴阳先生：找阴阳先生的机缘让白嘉轩偶然发现了“白鹿精灵”，通过白鹿引出两点，一是全书的传奇人物朱先生，用了很多笔墨侧面描写其超脱、睿智甚至神奇的特点；二是白鹿原的背景介绍，交待这块土地上的风土人情以及历史传奇。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;换地：白嘉轩希望得到“白鹿精灵”，想方设法用自己的水田和鹿子霖的旱地交换，这里带出白鹿原另一大户鹿家，并通过卖地这一情节逗露出白鹿两家的交情和明争暗斗的关系。换地成功后，白嘉轩将父亲的坟迁到了这块风水宝地，从此时运大转。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;续弦：白嘉轩进山娶会第7任夫人仙草，带回罂粟种子，人财两旺，孝文孝武出生，白家一扫霉运，重新兴旺。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学堂：恢复实力后，白嘉轩翻修祠堂，修建学堂。交待了白鹿原宗族关系、白家的族长地位。孝文兄弟、兆鹏兄弟以及长工鹿三之子黑娃被送入学堂，这里通过几个小孩的关系从另一面展现出白、鹿两大家的关系和气质特点，并着重点出了鹿三的形象。这里穿插了白灵出生，嘉轩为白灵认鹿三为干爹，再次描述长工鹿三和白家的渊源。小说第一阶段这条线结束.。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二条线索——革命：这是小说第一次明确点明时间。皇帝没了，城里闹了革命，原上闹了白狼。朱先生劝退清军——全书对朱先生毫不吝惜笔墨，大量近乎夸张的传说式叙述，这是有用意的，透过朱先生这个人物让整个故事的时代更迭富有厚重感、更耐人寻味。革命打破了原有的社会秩序，朱先生制定《乡约》，白嘉轩鹿子霖用《乡约》订立新规，仁义礼制成为白鹿原新的秩序规范。这里其实体现出了乡土中国的“家族”传统，在社会失灵时仍然有强大的力量。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新政府：鹿子霖成为革命后政府委任的白鹿村“乡约”（镇级政府首脑）。得势的鹿子霖有些得意忘形，这里写出鹿子霖投机的秉性。在政府强加赋税后，白嘉轩带头反抗，鹿三在白嘉轩被牵制之下率众去县政府散步，县长退让，取消苛税。不久后政府秋后算账，鹿三诸人被捕，白嘉轩设法捞人。事情平息后，县长邀请白嘉轩做县参议员，白嘉轩以及白鹿原的乡民逐渐接触到新的事物。白灵从小表现出不同寻常女孩的潇洒和聪颖，年纪稍长后正值革命兴起，自做主张去县城读书。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三条线索——黑娃外出打工：黑娃从小对白嘉轩以及白家即感到敬佩感激，又有点不愿亲近之感，成年后决定外出打工。引出田小娥的故事。黑娃在郭家做麦客时和郭掌柜的小老婆产生感情，二人偷情被郭掌柜发现，黑娃离开郭家，田小娥被休。黑娃找到田家，带田小娥回白鹿原。此举不见容于白鹿原宗族。这里提到白嘉轩的教子之道，坚持传统的“耕读传家”思想，对三个儿子的行为规范要求甚高。这里对孝文的描述是，一身正气，就像腰杆笔直的白嘉轩一样。埋下后手孝文的堕落。还有一笔是孝文由于性的晚熟而演变出一点“贪色”的毛病。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;兆鹏逃婚：接受了新思潮的鹿兆鹏不满旧式包办婚姻，在父族压力下和冷家大女儿成婚。后文中冷氏长期精神压抑，在性幻想与羞愧中疯掉。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;军阀：军阀围困西安，进白鹿原强制征粮，在兆鹏的怂恿下，黑娃和兆鹏一起烧了白鹿仓。西安解围，白嘉轩进城寻找白灵。这里交待白灵在城里读书的际遇，以及和鹿兆海的恋情。国共合作时期，白灵加入国民党，兆海加入XX 党。白鹿原上，身为新学校校长的兆鹏是有国民党身份的 XX党员，在村里大搞农协，黑娃成为骨干。一时间白鹿原鸡犬不宁，祠堂被砸。朱先生说：“白鹿原成了鏊子（你争我夺、翻来覆去之意）。”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;朱先生的县志：自从闹过军阀后朱先生主动申请重编县志，小说便多了一条旁白式的注脚。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;四一二后，国共分裂，农协失势。黑娃逃走。田小娥求鹿子霖设法相救黑娃，鹿子霖趁机与田小娥成奸。鹿子霖和田小娥偷情被村里的嬉皮少年狗蛋撞见，鹿子霖设计拿住狗蛋和田小娥，将二人押至族长处鞭笞。这里鹿子霖再次借田小娥来整治白家，希望诱使白孝文堕落。孝文上套。 黑娃做了土匪，为报复白嘉轩对田小娥的处罚，回乡打断了白嘉轩的腰。本想杀死鹿子霖，错杀了鹿子霖的父亲鹿泰恒。孝文与田小娥偷情败露，白嘉轩几近崩溃，白孝武成为新的伟岸族长形象后继。分家后，孝文彻底堕落，日子难以为继。鹿子霖趁机买下孝文的田产地产，意在羞辱白嘉轩。潦倒至极之下，白孝文受到刺激重鼓信心，此后的人生中成为不折不扣的投机客。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;田小娥之死：田小娥突然被杀，黑娃回乡寻仇，得知凶手是其父鹿三，黑娃一气之下与白鹿原断绝关系。这里穿插了白家的发家史“钱匣”的故事，白家祖辈穷困之时，用只进不出的钱匣惨淡经营，一点一滴拼搏出了一方天地，造就了白家世代相传的坚韧秉性。和后文中介绍的鹿家的发迹史作出对比。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之后的故事线索不再单一，镜头常常在白鹿原和革命队伍间切换。兆鹏上山找黑娃想让他的土匪队伍加入红军。为首的土匪大拇指并不动心。兆鹏的队伍几经剿灭。白灵在兆鹏的影响下加入XX党，而阴差阳错的是兆海却转入了国民党。二人终难走到一起。白灵和兆鹏在四处逃难式地进行地下工作，生发情感并成婚。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;白鹿原发生瘟疫，疑为田小娥鬼魂作祟。鹿三被田小娥鬼魂上身，出现异常举动。村民开始给田小娥烧香，白嘉轩修塔镇邪。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XX党内内斗，白灵被活埋。抗日期间国共并不消停，兆海进犯边区，被XX党军队打死。黑娃所在山寨头领被毒死，白孝文上山收编土匪加入保安队。黑娃悔过自新，回乡祭祖。鹿三去世。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;兆鹏策反黑娃起义，白孝文见势投机革命。孝文、黑娃成为正副县长。一年后，白孝文罗织罪名枪毙黑娃。全书完。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://blog.tomsheep.net/2012/09/19/notes</link>
                <guid>http://blog.tomsheep.net/2012/09/19/notes</guid>
                <pubDate>2012-09-19T03:16:55+08:00</pubDate>
        </item>


</channel>
</rss>
